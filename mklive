#!/usr/bin/env bash
#
# vim: set ts=4 sw=4 et:
#
#-
# Copyright (c) 2009-2015 Juan Romero Pardines.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-

#xbps-install -U -r /tmp/fakeroot --repository=https://repo-fastly.voidlinux.org/current bash -S
#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
trap 'error_out $? $LINENO' INT TERM 0
umask 022
declare -gi MAKE_X=0
declare -gi MAKE_XFCE_BASE=0
declare -gi MAKE_XFCE_CUSTOM=0
declare -gi MAKE_AWESOME=0
declare -gi LBIND=0
declare -gi QUIET=0

sh_choose_packages() {
    print_step "Configurando pacotes essenciais"
	declare -a INCLUDE_DIRS=()
	declare -g PROGNAME=$(basename "$0")
	declare -g REQUIRED_PKGS="base-files libgcc dash coreutils sed tar gawk syslinux grub-i386-efi grub-x86_64-efi memtest86+ squashfs-tools xorriso"
	declare -g INITRAMFS_PKGS="binutils device-mapper dhclient dracut-network openresolv"
	declare -g ADDITIONAL_PKGS="dialog gettext curl wget git pv nano parted tree htop rsync"
	ADDITIONAL_PKGS+=" grub-void-theme"
	ADDITIONAL_PKGS+=" xz zstd porg"
	ADDITIONAL_PKGS+=" bc geoip geoipupdate iputils lvm2 cryptsetup"
	ADDITIONAL_PKGS+=" xtools vpm vsv neofetch"
	ADDITIONAL_PKGS+=" bash-completion"
	#   ADDITIONAL_PKGS+=" wifi-firmware"
	#   ADDITIONAL_PKGS+=" rtl8812au-dkms rtl8821cu-dkms rtl8822bu-dkms"
	ADDITIONAL_PKGS+=" pacman"
	ADDITIONAL_PKGS+=" cifs-utils ntfs-3g"
	ADDITIONAL_PKGS+=" bubblewrap"
}

sh_choose_packages_awesome() {
    print_step "Escolhendo pacotes X Awesome Custom"
    #xorg
    ADDITIONAL_PKGS+=" xorg xinit xterm dbus dbus-x11 elogind dbus-elogind polkit-elogind xdg-user-dirs xrdb"
    #xfce
    ADDITIONAL_PKGS+=" awesome"
	ADDITIONAL_PKGS+=" firefox firefox-i18n-pt-BR"
	ADDITIONAL_PKGS+=" noto-fonts-emoji"
    ADDITIONAL_PKGS+=" Adapta"
    ADDITIONAL_PKGS+=" xfce4-terminal"
    ADDITIONAL_PKGS+=" NetworkManager network-manager-applet"
    ADDITIONAL_PKGS+=" pulseaudio pavucontrol pasystray gst-plugins-bad1 gst-plugins-good1 gst-plugins-ugly1 gst-plugins-base1"
#	#ADDITIONAL_PKGS+=" pipewire wireplumber pulseaudio-utils alsa-pipewire libspa-bluetooth libjack-pipewire"
    ADDITIONAL_PKGS+=" xfce4-pulseaudio-plugin"
    ADDITIONAL_PKGS+=" gnome-keyring"
    ADDITIONAL_PKGS+=" orca"
 	ADDITIONAL_PKGS+=" setxkbmap"
    ADDITIONAL_PKGS+=" numlockx"
    ADDITIONAL_PKGS+=" nitrogen"
	#login manager
	ADDITIONAL_PKGS+=" lxdm"
	#ADDITIONAL_PKGS+=" lxappearance lxinput lxrandr lxtask"
	#ADDITIONAL_PKGS+=" slim"
	#ADDITIONAL_PKGS+=" lightdm"
}

sh_choose_packages_xfce_base() {
    print_step "Escolhendo pacotes X Base"
    #xorg
    ADDITIONAL_PKGS+=" xorg xinit xterm dbus dbus-x11 dbus-elogind polkit-elogind xdg-user-dirs xrdb"
    #xfce
    ADDITIONAL_PKGS+=" xfce4"
	ADDITIONAL_PKGS+=" firefox firefox-i18n-pt-BR"
	ADDITIONAL_PKGS+=" noto-fonts-emoji"
    ADDITIONAL_PKGS+=" Adapta"
    ADDITIONAL_PKGS+=" NetworkManager network-manager-applet"
    ADDITIONAL_PKGS+=" pulseaudio pavucontrol pasystray gst-plugins-bad1 gst-plugins-good1 gst-plugins-ugly1 gst-plugins-base1"
#	#ADDITIONAL_PKGS+=" pipewire wireplumber pulseaudio-utils alsa-pipewire libspa-bluetooth libjack-pipewire"
    ADDITIONAL_PKGS+=" xfce4-pulseaudio-plugin"
    ADDITIONAL_PKGS+=" gnome-keyring"
    ADDITIONAL_PKGS+=" orca"
	#login manager
	ADDITIONAL_PKGS+=" lxdm"
	#ADDITIONAL_PKGS+=" lxappearance lxinput lxrandr lxtask"
	#ADDITIONAL_PKGS+=" slim"
	#ADDITIONAL_PKGS+=" lightdm"
}

sh_choose_packages_xfce_custom() {
    print_step "Escolhendo pacotes X Custom"
	ADDITIONAL_PKGS+=" xfce4-screenshooter xfce4-dict"
    ADDITIONAL_PKGS+=" xfce4-battery-plugin"
    ADDITIONAL_PKGS+=" xfce4-clipman-plugin"
    ADDITIONAL_PKGS+=" xfce4-cpufreq-plugin"
	ADDITIONAL_PKGS+=" xfce4-sensors-plugin"
	ADDITIONAL_PKGS+=" xfce4-systemload-plugin"
	ADDITIONAL_PKGS+=" xfce4-cpugraph-plugin"
	ADDITIONAL_PKGS+=" xfce4-datetime-plugin"
    ADDITIONAL_PKGS+=" xfce4-diskperf-plugin"
    ADDITIONAL_PKGS+=" xfce4-fsguard-plugin"
	ADDITIONAL_PKGS+=" xfce4-genmon-plugin"
    ADDITIONAL_PKGS+=" xfce4-mailwatch-plugin"
    ADDITIONAL_PKGS+=" xfce4-mpc-plugin"
    ADDITIONAL_PKGS+=" xfce4-netload-plugin"
	ADDITIONAL_PKGS+=" xfce4-time-out-plugin"
    ADDITIONAL_PKGS+=" xfce4-timer-plugin"
    ADDITIONAL_PKGS+=" xfce4-verve-plugin"
    ADDITIONAL_PKGS+=" xfce4-whiskermenu-plugin"
    ADDITIONAL_PKGS+=" xfce4-weather-plugin"
 	ADDITIONAL_PKGS+=" xfce4-wavelan-plugin"
    ADDITIONAL_PKGS+=" xfce4-xkb-plugin"
    ADDITIONAL_PKGS+=" xfce4-plugins"
 	ADDITIONAL_PKGS+=" setxkbmap"
    ADDITIONAL_PKGS+=" numlockx"
    ADDITIONAL_PKGS+=" nitrogen"
    ADDITIONAL_PKGS+=" mate-notification-daemon"
 	ADDITIONAL_PKGS+=" plank"
	ADDITIONAL_PKGS+=" adwaita-icon-theme"
	ADDITIONAL_PKGS+=" xfwm-axiom-theme"
	ADDITIONAL_PKGS+=" cool-retro-term"
	ADDITIONAL_PKGS+=" xarchiver unrar zip unzip 7zip p7zip bzip2 file-roller"
	ADDITIONAL_PKGS+=" bluez bluez-deprecated bluez-alsa bluedevil blueman bluez-cups blueberry gnome-bluetooth1"
##  ADDITIONAL_PKGS+=" pcmanfm"
#	#ADDITIONAL_PKGS+=" fonts-roboto-ttf liberation-fonts-ttf dejavu-fonts-ttf fonts-droid-ttf fonts-croscore-ttf terminus-font font-emoji-one-color google-fonts-ttf"
	ADDITIONAL_PKGS+=" noto-fonts-emoji ttf-ubuntu-font-family font-iosevka nerd-fonts-symbols-ttf"
	ADDITIONAL_PKGS+=" avahi irqbalance"
	ADDITIONAL_PKGS+=" cups system-config-printer system-config-printer-udev splix samsung-unified-driver"
    ADDITIONAL_PKGS+=" brother-brlaser cups-pdf"
	ADDITIONAL_PKGS+=" gvfs gvfs-smb gvfs-cdda inetutils iputils"
#	#ADDITIONAL_PKGS+=" lxterminal rxvt-unicode"
	ADDITIONAL_PKGS+=" nano vim"
	ADDITIONAL_PKGS+=" nano-syntax-highlighting"
	ADDITIONAL_PKGS+=" gparted"
	ADDITIONAL_PKGS+=" bat"
	ADDITIONAL_PKGS+=" vlc celluloid"
	ADDITIONAL_PKGS+=" evince"
	ADDITIONAL_PKGS+=" mate-calc cmatrix tmate xkill menulibre mugshot ocs-url"
	ADDITIONAL_PKGS+=" nvme-cli"
	ADDITIONAL_PKGS+=" inxi"
#
#	#office
	ADDITIONAL_PKGS+=" libreoffice libreoffice-i18n-pt-BR"
#
#	#pacman
	ADDITIONAL_PKGS+=" pacman fakeroot bsdtar octoxbps"
}

debug() {
	whiptail \
		--fb \
		--clear \
		--backtitle "[debug]$0" \
		--title "[debug]$0" \
		--yesno "${*}\n" \
		0 40
	result=$?
	if ((result)); then
		exit
	fi
	return $result
}

sh_diahora() {
	DIAHORA=$(date +"%Y%m%d-%H%M")
	printf "%s\n" "$DIAHORA"
}

sh_confAmbiente() {
	declare -g BOOTLOG="/tmp/void-mklive-$(sh_diahora).log"
	declare -g LOGGER='/dev/tty8'
	declare -g STEP_COUNT=21
}

sh_setvarcolors() {
	reset=$(tput sgr0)
	# Definir os estilos de texto como variáveis
	bold=$(tput bold)
	underline=$(tput smul)   # Início do sublinhado
	nounderline=$(tput rmul) # Fim do sublinhado
	reverse=$(tput rev)      # Inverte as cores de fundo e texto
	# Definir as cores ANSI como variáveis
	black=$(tput bold)$(tput setaf 0)
	red=$(tput bold)$(tput setaf 196)
	green=$(tput bold)$(tput setaf 2)
	yellow=$(tput bold)$(tput setaf 3)
	blue=$(tput setaf 4)
	pink=$(tput setaf 5)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
	white=$(tput setaf 7)
	gray=$(tput setaf 8)
	orange=$(tput setaf 202)
	purple=$(tput setaf 125)
	violet=$(tput setaf 61)
	light_red=$(tput setaf 9)
	light_green=$(tput setaf 10)
	light_yellow=$(tput setaf 11)
	light_blue=$(tput setaf 12)
	light_magenta=$(tput setaf 13)
	light_cyan=$(tput setaf 14)
	bright_white=$(tput setaf 15)
}

die() {
    local script_name0="${0##*/}[${FUNCNAME[0]}]:${BASH_LINENO[0]}"
    local script_name1="${0##*/}[${FUNCNAME[1]}]:${BASH_LINENO[1]}"
    local script_name2="${0##*/}[${FUNCNAME[2]}]:${BASH_LINENO[2]}"
	info_msg "ERROR: ${script_name0} $@"
	error_out 1 $LINENO
}

info_msg() {
	printf "${red}$@${reset}\n"
}

print_step() {
	CURRENT_STEP=$((CURRENT_STEP + 1))
	info_msg "$cyan[${CURRENT_STEP}/${STEP_COUNT}]$reset $@"
}

mount_pseudofs() {
	for f in sys dev proc; do
		mkdir -p "$ROOTFS"/$f
		mount --rbind /$f "$ROOTFS"/$f
		LBIND=1
	done
}

umount_pseudofs() {
	for f in sys dev proc; do
		if ! umount -R -f "$ROOTFS/$f"  > /dev/null 2>&-; then
    	    if (( LBIND )); then
	    		info_msg "ERROR: failed to unmount $ROOTFS/$f/"
		    	return 1
		    fi
		fi
		LBIND=0
	done
}

error_out() {
	trap - INT TERM 0
	umount_pseudofs || exit "${1:-0}"
	[ -d "$BUILDDIR" ] && [ -z "$KEEP_BUILDDIR" ] && rm -rf --one-file-system "$BUILDDIR"
	exit "${1:-0}"
}

sh_chroot_job() {
	local cmsg="$1"
	local cjob="$2"
	local shell='/bin/bash'

	print_step "$cmsg"
	{
		bwrap --bind "$ROOTFS" / \
			--dev /dev \
			--proc /proc \
			--bind /sys /sys \
			--bind /run /run \
			--ro-bind /etc/resolv.conf /etc/resolv.conf \
			--ro-bind /etc/passwd /etc/passwd \
			--ro-bind /etc/group /etc/group \
			"$shell" -c "$cjob"
		#chroot "$ROOTFS" "$shell" -c "$cjob"  2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

copy_void_keys() {
	mkdir -p "$1"/var/db/xbps/keys
	cp keys/*.plist "$1"/var/db/xbps/keys
}

copy_dracut_files() {
	mkdir -p "$1"/usr/lib/dracut/modules.d/01vmklive
	cp dracut/vmklive/* "$1"/usr/lib/dracut/modules.d/01vmklive/
}

copy_autoinstaller_files() {
	mkdir -p "$1"/usr/lib/dracut/modules.d/01autoinstaller
	cp dracut/autoinstaller/* "$1"/usr/lib/dracut/modules.d/01autoinstaller/
}

install_prereqs() {
{
   	LC_ALL=C XBPS_ARCH=$ARCH "$XBPS_INSTALL_CMD" -r "$VOIDHOSTDIR" ${XBPS_REPOSITORY} -c "$XBPS_HOST_CACHEDIR" -y $REQUIRED_PKGS -S
} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
    result="${PIPESTATUS[0]}"
	[ $result -ne 0 ] && die "Failed to install required software, exiting..."
}

install_packages() {
    print_step "Testando void pkgs..."
	{
		LC_ALL=C XBPS_ARCH=$BASE_ARCH "${XBPS_INSTALL_CMD}" -r "$ROOTFS" ${XBPS_REPOSITORY} -c "$XBPS_CACHEDIR" -yn $PACKAGE_LIST $INITRAMFS_PKGS $ADDITIONAL_PKGS
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	result="${PIPESTATUS[0]}"
	[ $result -ne 0 ] && die "Missing required binary packages, exiting..."

	mount_pseudofs

    print_step "Instalando void pkgs BASE INITRAMFS em rootfs..."
    {
		LC_ALL=C XBPS_ARCH=$BASE_ARCH "${XBPS_INSTALL_CMD}" -U -r "$ROOTFS" ${XBPS_REPOSITORY} -c "$XBPS_CACHEDIR" -y $PACKAGE_LIST $INITRAMFS_PKGS
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	result="${PIPESTATUS[0]}"
	[ $result -ne 0 ] && die "Failed to install $PACKAGE_LIST"

    print_step "Instalando void pkgs ADDITIONAL em rootfs..."
    {
		LC_ALL=C XBPS_ARCH=$BASE_ARCH "${XBPS_INSTALL_CMD}" -U -r "$ROOTFS" ${XBPS_REPOSITORY} -c "$XBPS_CACHEDIR" -y $ADDITIONAL_PKGS
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
	result="${PIPESTATUS[0]}"
	[ $result -ne 0 ] && die "Failed to install $ADDITIONAL_PKGS"

	print_step "Reconfigurando o ambiente - pass 1"
    {
		xbps-reconfigure -r "$ROOTFS" -f base-files >/dev/null 2>&1
		chroot "$ROOTFS" env -i xbps-reconfigure -f base-files

		# Enable choosen UTF-8 locale and generate it into the target rootfs.
		if [ -f "$ROOTFS"/etc/default/libc-locales ]; then
			sed -e "s/\#\(${LOCALE}.*\)/\1/g" -i "$ROOTFS"/etc/default/libc-locales
		fi
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

ignore_packages() {
	mkdir -p "$ROOTFS"/etc/xbps.d
	for pkg in $IGNORE_PKGS; do
		echo "ignorepkg=$pkg" >>"$ROOTFS"/etc/xbps.d/mklive-ignore.conf
	done
}

get_conf_path() {
    local path

    if ((MAKE_XFCE_BASE)); then
        path='config-xfce-base'
    elif ((MAKE_XFCE_CUSTOM)); then
        path='config-xfce-custom'
    elif ((MAKE_AWESOME)); then
        path='config-awesome-custom'
    fi
    echo "$path"
}

install_skel() {
    local path=$(get_conf_path)

	#skel
	print_step "Copiando skel into $ROOTFS/etc/skel"
	{
		[ -d "$ROOTFS/etc/skel/" ] && mkdir -p "$ROOTFS"/etc/skel/
		cp -Rpva $path/etc/. "$ROOTFS/etc/"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER

	print_step "Copiando configuracoes into $ROOTFS/root/"
	{
		cp -Rpva $path/etc/skel/.bash* $ROOTFS/root/
		cp -Rpva $path/etc/skel/.git-prompt.sh $ROOTFS/root/
		cp -Rpva $path/etc/skel/.dircolors $ROOTFS/root/
		rsync -a $path/etc/skel/.config/neofetch/config.conf $ROOTFS/root/.config/neofetch/
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_wallpapers() {
    local path=$(get_conf_path)

	print_step "Copiando wallpapers into $ROOTFS/usr/share/backgrounds"
	{
		[ -d "$ROOTFS/usr/share/" ] && mkdir -p "$ROOTFS"/usr/share/
		cp -Rpva $path/usr/share/backgrounds -t "$ROOTFS/usr/share/"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_installer() {
    local path=$(get_conf_path)

	print_step "Copiando installer into $ROOTFS/usr/share/applications"
	{
		[ -d "$ROOTFS/usr/share/" ] && mkdir -p "$ROOTFS"/usr/share/
		cp -Rpva $path/usr/share/applications -t "$ROOTFS/usr/share/"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_usr() {
    local path=$(get_conf_path)

	print_step "Copiando usr into $ROOTFS/usr/"
	{
		[ -d "$ROOTFS/usr" ] && mkdir -p "$ROOTFS"/usr/
		rsync -a $path/usr/ $ROOTFS/usr/
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_themes() {
    local path

    ((MAKE_XFCE_BASE)) && path='config-xfce-base' || path='config-xfce-custom'
	print_step "Copiando temas into $ROOTFS/usr/share/themes"
	{
		[ -d "$ROOTFS/usr/share/" ] && mkdir -p "$ROOTFS"/usr/share/
		cp -Rpva $path/usr/share/themes -t "$ROOTFS/usr/share/"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_icons() {
    local path

    ((MAKE_XFCE_BASE)) && path='config-xfce-base' || path='config-xfce-custom'
	print_step "Copiando icones into $ROOTFS/usr/share/icons"
	{
		[ -d "$ROOTFS/usr/share/" ] && mkdir -p "$ROOTFS"/usr/share/
		cp -Rpva $path/usr/share/icons -t "$ROOTFS/usr/share/"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_grub_themes() {
    local path

    ((MAKE_XFCE_BASE)) && path='config-xfce-base' || path='config-xfce-custom'
	print_step "Copiando grub themes into $ROOTFS/boot/grub/themes"
	{
		[ -d "$ROOTFS/boot/grub/themes/" ] && mkdir -p "$ROOTFS"/boot/grub/
		cp -Rpva $path/boot/grub/themes -t "$ROOTFS/boot/grub/"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_chili_apps() {
    local path='config-xfce-base'

    ((MAKE_XFCE_BASE)) && path='config-xfce-base' || path='config-xfce-custom'
	print_step "Copiando aplicativos into $ROOTFS/usr/bin"
	{
		[ -d "$ROOTFS/usr/bin/" ] && mkdir -p "$ROOTFS"/usr/bin/
		for x in $path/usr/bin/*; do
			install -Dm755 $x "$ROOTFS"/usr/bin/
		done
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

install_pacman() {
	#sh_chroot_job "Ajustando instalador" 'cfile=/etc/skel/void-install.desktop; chmod +x $cfile; checksum=$(sha256sum $cfile | awk '{print "$1"}'); gio set $cfile metadata::xfce-exe-checksum $checksum; gio set $cfile metadata::trusted true;'
	sh_chroot_job "Instalando pacman App" "/usr/bin/pacman -Sydd pacman-contrib brave-browser paru --noconfirm --overwrite \*"
	if ((MAKE_XFCE_CUSTOM)); then
		sh_chroot_job "Instalando Brave-Browser" "/usr/bin/pacman -Sdd brave-browser --noconfirm --overwrite \*"
		sh_chroot_job "Instalando Google Chrome" "/usr/bin/paru -Sdd google-chrome --noconfirm --overwrite \*"
	fi
	sh_chroot_job "Removendo Cache" "/usr/bin/paccache -k0 -r -v"
}

reconfigure_packages() {
	print_step "Reconfigurando o ambiente - pass 2"
	{
		chroot "$ROOTFS" env -i xbps-reconfigure -a
		#	sh_chroot_job "Reconfigurando o ambiente - pass 2" 'xbps-reconfigure -a'
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

finish_clean() {
	# Cleanup and remove useless stuff.
	xbps-remove -r "$ROOTFS" -Ooy >/dev/null 2>&1
	rm -rf "$ROOTFS"/var/cache/* "$ROOTFS"/run/* "$ROOTFS"/var/run/*
}

enable_services() {
	SERVICE_LIST="$*"
	for service in $SERVICE_LIST; do
		if ! [ -e $ROOTFS/etc/sv/$service ]; then
			die "service $service not in /etc/sv"
		fi
		ln -sf /etc/sv/$service $ROOTFS/etc/runit/runsvdir/default/
	done
}

copy_include_directories() {
	for includedir in "${INCLUDE_DIRS[@]}"; do
		info_msg "=> copying include directory '$includedir' ..."
		find "$includedir" -mindepth 1 -maxdepth 1 -exec cp -rfpPv {} "$ROOTFS"/ \;
	done
}

generate_initramfs() {
	local _args
	{
		copy_dracut_files "$ROOTFS"
		copy_autoinstaller_files "$ROOTFS"
		chroot "$ROOTFS" env -i /usr/bin/dracut -N --"${INITRAMFS_COMPRESSION}" --add-drivers "ahci" --force-add "vmklive autoinstaller" --omit systemd "/boot/initrd" $KERNELVERSION
		result="${PIPESTATUS[0]}"
		[ $result -ne 0 ] && die "Failed to generate the initramfs"
		mv "$ROOTFS"/boot/initrd "$BOOT_DIR"
		cp "$ROOTFS"/boot/vmlinuz-$KERNELVERSION "$BOOT_DIR"/vmlinuz
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

cleanup_rootfs() {
	for f in ${INITRAMFS_PKGS}; do
		revdeps=$(xbps-query -r "$ROOTFS" -X $f)
		if [ -n "$revdeps" ]; then
			xbps-pkgdb -r "$ROOTFS" -m auto $f
		else
			xbps-remove -r "$ROOTFS" -Ry ${f} >/dev/null 2>&1
		fi
	done
	rm -r "$ROOTFS"/usr/lib/dracut/modules.d/01vmklive
	rm -r "$ROOTFS"/usr/lib/dracut/modules.d/01autoinstaller
}

generate_isolinux_boot() {
	cp -f "$SYSLINUX_DATADIR"/isolinux.bin "$ISOLINUX_DIR"
	cp -f "$SYSLINUX_DATADIR"/ldlinux.c32 "$ISOLINUX_DIR"
	cp -f "$SYSLINUX_DATADIR"/libcom32.c32 "$ISOLINUX_DIR"
	cp -f "$SYSLINUX_DATADIR"/vesamenu.c32 "$ISOLINUX_DIR"
	cp -f "$SYSLINUX_DATADIR"/libutil.c32 "$ISOLINUX_DIR"
	cp -f "$SYSLINUX_DATADIR"/chain.c32 "$ISOLINUX_DIR"
	cp -f "$SYSLINUX_DATADIR"/reboot.c32 "$ISOLINUX_DIR"
	cp -f "$SYSLINUX_DATADIR"/poweroff.c32 "$ISOLINUX_DIR"
	cp -f isolinux/isolinux.cfg.in "$ISOLINUX_DIR"/isolinux.cfg
	cp -f ${SPLASH_IMAGE} "$ISOLINUX_DIR"

	sed -i -e "s|@@SPLASHIMAGE@@|$(basename "${SPLASH_IMAGE}")|" \
		-e "s|@@KERNVER@@|${KERNELVERSION}|" \
		-e "s|@@KEYMAP@@|${KEYMAP}|" \
		-e "s|@@ARCH@@|$BASE_ARCH|" \
		-e "s|@@LOCALE@@|${LOCALE}|" \
		-e "s|@@BOOT_TITLE@@|${BOOT_TITLE}|" \
		-e "s|@@BOOT_CMDLINE@@|${BOOT_CMDLINE}|" \
		"$ISOLINUX_DIR"/isolinux.cfg

	# include memtest86+
	cp -f "$VOIDHOSTDIR"/boot/memtest.bin "$BOOT_DIR"
}

generate_grub_efi_boot() {
	{
		cp -f grub/grub.cfg "$GRUB_DIR"
		cp -f grub/grub_void.cfg.in "$GRUB_DIR"/grub_void.cfg
		sed -i -e "s|@@SPLASHIMAGE@@|$(basename "${SPLASH_IMAGE}")|" \
			-e "s|@@KERNVER@@|${KERNELVERSION}|" \
			-e "s|@@KEYMAP@@|${KEYMAP}|" \
			-e "s|@@ARCH@@|$BASE_ARCH|" \
			-e "s|@@BOOT_TITLE@@|${BOOT_TITLE}|" \
			-e "s|@@BOOT_CMDLINE@@|${BOOT_CMDLINE}|" \
			-e "s|@@LOCALE@@|${LOCALE}|" "$GRUB_DIR"/grub_void.cfg
		mkdir -p "$GRUB_DIR"/fonts
		cp -f "$GRUB_DATADIR"/unicode.pf2 "$GRUB_DIR"/fonts

		modprobe -q loop || :

		# Create EFI vfat image.
		truncate -s 32M "$GRUB_DIR"/efiboot.img
		mkfs.vfat -F12 -S 512 -n "grub_uefi" "$GRUB_DIR/efiboot.img"

		GRUB_EFI_TMPDIR="$(mktemp --tmpdir="$HOME" -d)"
		LOOP_DEVICE="$(losetup --show --find "${GRUB_DIR}"/efiboot.img)"
		mount -o rw,flush -t vfat "${LOOP_DEVICE}" "${GRUB_EFI_TMPDIR}"

		cp -a "$IMAGEDIR"/boot "$VOIDHOSTDIR"
		xbps-uchroot "$VOIDHOSTDIR" grub-mkstandalone -- \
			--directory="/usr/lib/grub/i386-efi" \
			--format="i386-efi" \
			--output="/tmp/bootia32.efi" \
			"boot/grub/grub.cfg"
		if [ $? -ne 0 ]; then
			umount "$GRUB_EFI_TMPDIR"
			losetup --detach "${LOOP_DEVICE}"
			die "Failed to generate EFI loader"
		fi
		mkdir -p "${GRUB_EFI_TMPDIR}"/EFI/BOOT
		cp -f "$VOIDHOSTDIR"/tmp/bootia32.efi "${GRUB_EFI_TMPDIR}"/EFI/BOOT/BOOTIA32.EFI
		xbps-uchroot "$VOIDHOSTDIR" grub-mkstandalone -- \
			--directory="/usr/lib/grub/x86_64-efi" \
			--format="x86_64-efi" \
			--output="/tmp/bootx64.efi" \
			"boot/grub/grub.cfg"
		if [ $? -ne 0 ]; then
			umount "$GRUB_EFI_TMPDIR"
			losetup --detach "${LOOP_DEVICE}"
			die "Failed to generate EFI loader"
		fi
		cp -f "$VOIDHOSTDIR"/tmp/bootx64.efi "${GRUB_EFI_TMPDIR}"/EFI/BOOT/BOOTX64.EFI
		umount "$GRUB_EFI_TMPDIR"
		losetup --detach "${LOOP_DEVICE}"
		rm -rf "$GRUB_EFI_TMPDIR"

		# include memtest86+
		cp -f "$VOIDHOSTDIR"/boot/memtest.efi "$BOOT_DIR"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

generate_squashfs() {
	umount_pseudofs
	{
		# Find out required size for the rootfs and create an ext3fs image off it.
		ROOTFS_SIZE=$(du --apparent-size -sm "$ROOTFS" | awk '{print $1}')
		mkdir -p "$BUILDDIR/tmp/LiveOS"
		truncate -s "$((ROOTFS_SIZE + ROOTFS_SIZE))M" "$BUILDDIR"/tmp/LiveOS/ext3fs.img
		mkdir -p "$BUILDDIR/tmp-rootfs"
		mkfs.ext3 -F -m1 "$BUILDDIR/tmp/LiveOS/ext3fs.img" 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		mount -o loop "$BUILDDIR/tmp/LiveOS/ext3fs.img" "$BUILDDIR/tmp-rootfs"
		cp -a "$ROOTFS"/* "$BUILDDIR"/tmp-rootfs/
		umount -f "$BUILDDIR/tmp-rootfs"
		mkdir -p "$IMAGEDIR/LiveOS"

		"$VOIDHOSTDIR"/usr/bin/mksquashfs "$BUILDDIR/tmp" "$IMAGEDIR/LiveOS/squashfs.img" \
			-comp "${SQUASHFS_COMPRESSION}" || die "Failed to generate squashfs image"
		chmod 444 "$IMAGEDIR/LiveOS/squashfs.img"

		# Remove rootfs and temporary dirs, we don't need them anymore.
		rm -rf "$ROOTFS"
		rm -rf "$BUILDDIR/tmp-rootfs"
		rm -rf "$BUILDDIR/tmp"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

generate_iso_image() {
	{
		"$VOIDHOSTDIR"/usr/bin/xorriso \
			-as mkisofs \
			-iso-level 3 -rock -joliet \
			-max-iso9660-filenames -omit-period \
			-omit-version-number -relaxed-filenames -allow-lowercase \
			-volid "VOID_LIVE" \
			-eltorito-boot boot/isolinux/isolinux.bin \
			-eltorito-catalog boot/isolinux/boot.cat \
			-no-emul-boot -boot-load-size 4 -boot-info-table \
			-eltorito-alt-boot -e boot/grub/efiboot.img -isohybrid-gpt-basdat -no-emul-boot \
			-isohybrid-mbr "$SYSLINUX_DATADIR"/isohdpfx.bin \
			-output "$OUTPUT_FILE" "$IMAGEDIR" || die "Failed to generate ISO image"
	} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
}

usage() {
	cat <<-EOF
		        Usage: $PROGNAME [options]

		        Generates a basic live ISO image of Void Linux. This ISO image can be written
		        to a CD/DVD-ROM or any USB stick.

		        To generate a more complete live ISO image, use build-x86-images.sh.

		        OPTIONS
                -a <arch>          Set XBPS_ARCH in the ISO image
                -b <system-pkg>    Set an alternative base package (default: base-system)
                -r <repo>          Use this XBPS repository. May be specified multiple times
                -c <cachedir>      Use this XBPS cache directory (default: ./xbps-cachedir-<arch>)
                -k <keymap>        Default keymap to use (default: us)
                -l <locale>        Default locale to use (default: en_US.UTF-8)
                -i <lz4|gzip|bzip2|xz> Compression type for the initramfs image (default: xz)
                -s <gzip|lzo|xz>   Compression type for the squashfs image (default: xz)
                -o <file>          Output file name for the ISO image (default: automatic)
                -p "<pkg> ..."     Install additional packages in the ISO image
                -g "<pkg> ..."     Ignore packages when building the ISO image
                -I <includedir>    Include directory structure under given path in the ROOTFS
                -S "<service> ..." Enable services in the ISO image
                -C "<arg> ..."     Add additional kernel command line arguments
                -T <title>         Modify the bootloader title (default: Void Linux)
                -v linux<version>  Install a custom Linux version on ISO image (default: linux metapackage)
                -K                 Do not remove builddir
                -h                 Show this help and exit
                -V                 Show version and exit
                -X                 Make XFCE iso base.
                -Y                 Make XFCE iso custom.
                -W                 Make AWESOME iso custom.
                -Q                 Quiet mode (default: 0)

	EOF
}

#
# main()
#
sh_confAmbiente
sh_setvarcolors

while getopts "a:b:r:c:C:T:Kk:l:i:I:S:s:o:p:g:v:VhXxYyQqWw" opt; do
	case $opt in
	a) BASE_ARCH="$OPTARG" ;;
	b) BASE_SYSTEM_PKG="$OPTARG" ;;
	r) XBPS_REPOSITORY="--repository=$OPTARG $XBPS_REPOSITORY" ;;
	c) XBPS_CACHEDIR="$OPTARG" ;;
	g) IGNORE_PKGS="$IGNORE_PKGS $OPTARG" ;;
	K) readonly KEEP_BUILDDIR=1 ;;
	k) KEYMAP="$OPTARG" ;;
	l) LOCALE="$OPTARG" ;;
	i) INITRAMFS_COMPRESSION="$OPTARG" ;;
	I) INCLUDE_DIRS+=("$OPTARG") ;;
	S) SERVICE_LIST="$SERVICE_LIST $OPTARG" ;;
	s) SQUASHFS_COMPRESSION="$OPTARG" ;;
	o) OUTPUT_FILE="$OPTARG" ;;
	p) PACKAGE_LIST="$PACKAGE_LIST $OPTARG" ;;
	C) BOOT_CMDLINE="$OPTARG" ;;
	T) BOOT_TITLE="$OPTARG" ;;
	x|X) MAKE_X=1; MAKE_XFCE_BASE=1 ;;
	y|Y) MAKE_X=1; MAKE_XFCE_CUSTOM=1 ;;
	w|W) MAKE_X=1; MAKE_AWESOME=1 ;;
    q|Q) QUIET=1 ;;
	v) LINUX_VERSION="$OPTARG" ;;
	V)
		version
		exit 0
		;;
	h)
		usage
		exit 0
		;;
	*)
		usage >&2
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))

# Check for root permissions.
if [ "$(id -u)" -ne 0 ]; then
	die "Must be run as root, exiting..."
fi

sh_choose_packages
if ((MAKE_X)); then
    if ((MAKE_AWESOME)); then
        sh_choose_packages_awesome
    fi
    if ((MAKE_XFCE_BASE)); then
        sh_choose_packages_xfce_base
    fi
    if ((MAKE_XFCE_CUSTOM)); then
        sh_choose_packages_xfce_base
        sh_choose_packages_xfce_custom
    fi
fi

#XBPS_REPOSITORY="$XBPS_REPOSITORY --repository=http://void.chililinux.com/voidlinux/current"
#XBPS_REPOSITORY="$XBPS_REPOSITORY --repository=http://100.97.0.15:92/voidlinux/current --repository=http://100.97.0.15:92/voidlinux/current/extras"
#XBPS_REPOSITORY="$XBPS_REPOSITORY --repository=https://mirrors.servercentral.com/voidlinux/current""\
# --repository=https://mirrors.servercentral.com/voidlinux/current/nonfree""\
# --repository=https://mirrors.servercentral.com/voidlinux/current/multilib""\
# --repository=https://mirrors.servercentral.com/voidlinux/current/multilib/nonfree""\
# --repository=https://chililinux.com/void/current""\
# --repository=/github/void-packages/hostdir/binpkgs"
XBPS_REPOSITORY="$XBPS_REPOSITORY --repository=https://repo-fastly.voidlinux.org/current""\
 --repository=https://repo-fastly.voidlinux.org/current/nonfree""\
 --repository=https://repo-fastly.voidlinux.org/current/multilib""\
 --repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree""\
 --repository=/home/vcatafesta/github/void-packages/hostdir/binpkgs"

# Configure dracut to use overlayfs for the writable overlay.
BOOT_CMDLINE="$BOOT_CMDLINE rd.live.overlay.overlayfs=1 "
ARCH=$(xbps-uhelper arch)

# Set defaults
: ${BASE_ARCH:=$(xbps-uhelper arch 2>/dev/null || uname -m)}
: ${XBPS_CACHEDIR:="$(pwd -P)"/xbps-cachedir-${BASE_ARCH}}
: ${XBPS_HOST_CACHEDIR:="$(pwd -P)"/xbps-cachedir-${ARCH}}
#: ${KEYMAP:=us}
#: ${LOCALE:=en_US.UTF-8}
: ${KEYMAP:=br-abnt2}
: ${LOCALE:=pt_BR.UTF-8}
: ${INITRAMFS_COMPRESSION:=xz}
: ${SQUASHFS_COMPRESSION:=xz}
: ${BASE_SYSTEM_PKG:=base-system}
: ${BOOT_TITLE:="Void Linux Custom"}

# Required packages in the image for a working system.
PACKAGE_LIST="$BASE_SYSTEM_PKG $PACKAGE_LIST"

#mount -o remount,size=18G,mode=1777 tmpfs /tmp
#ROOTDIR='/tmp'
#mount -o remount,size=18G,mode=1777 tmpfs /dev/shm
#ROOTDIR='/dev/shm'
ROOTDIR='/mnt/voidlinux'
#mount /dev/nvme0n1p2 /mnt/voidlinux
#ROOTDIR='/mnt/voidlinux/@/lixo'

if [ -n "$ROOTDIR" ]; then
	#	BUILDDIR=$(mktemp --tmpdir="$ROOTDIR" -d)
	BUILDDIR="$ROOTDIR/void"
	rm -rf "$BUILDDIR"
	mkdir -p "$BUILDDIR"
else
	BUILDDIR=$(mktemp --tmpdir="$(pwd -P)" -d)
fi
BUILDDIR=$(readlink -f "$BUILDDIR")
IMAGEDIR="$BUILDDIR/image"
ROOTFS="$IMAGEDIR/rootfs"
VOIDHOSTDIR="$BUILDDIR/void-host"
BOOT_DIR="$IMAGEDIR/boot"
ISOLINUX_DIR="$BOOT_DIR/isolinux"
GRUB_DIR="$BOOT_DIR/grub"
ISOLINUX_CFG="$ISOLINUX_DIR/isolinux.cfg"
CURRENT_STEP=0
#STEP_COUNT=16

[ "${#INCLUDE_DIRS[@]}" -gt 0 ] && STEP_COUNT=$((STEP_COUNT + 1))
[ -n "${IGNORE_PKGS}" ] && STEP_COUNT=$((STEP_COUNT + 1))

: ${SYSLINUX_DATADIR:="$VOIDHOSTDIR"/usr/lib/syslinux}
: ${GRUB_DATADIR:="$VOIDHOSTDIR"/usr/share/grub}
: ${SPLASH_IMAGE:=data/splash.png}
: ${XBPS_INSTALL_CMD:=xbps-install}
: ${XBPS_REMOVE_CMD:=xbps-remove}
: ${XBPS_QUERY_CMD:=xbps-query}
: ${XBPS_RINDEX_CMD:=xbps-rindex}
: ${XBPS_UHELPER_CMD:=xbps-uhelper}
: ${XBPS_RECONFIGURE_CMD:=xbps-reconfigure}

mkdir -p "$ROOTFS" "$VOIDHOSTDIR" "$ISOLINUX_DIR" "$GRUB_DIR"

sh_monitor() {
    if [ $QUIET -eq 1 ]; then
        tee -i -a "$BOOTLOG" >$LOGGER
    fi
}

print_step "Synchronizing XBPS repository data..."
{
	copy_void_keys "$ROOTFS"
	copy_void_keys "$VOIDHOSTDIR"
	LC_ALL=C XBPS_ARCH=$BASE_ARCH $XBPS_INSTALL_CMD -r "$ROOTFS" ${XBPS_REPOSITORY} -Sy
	LC_ALL=C XBPS_ARCH=$ARCH $XBPS_INSTALL_CMD -r "$VOIDHOSTDIR" ${XBPS_REPOSITORY} -Sy
} 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
result="${PIPESTATUS[0]}"
[ $result -ne 0 ] && die "Failed to synchronizing, exiting..."

# Get linux version for ISO
# If linux version option specified use
if [ -n "$LINUX_VERSION" ]; then
	if ! echo "$LINUX_VERSION" | grep "linux[0-9._]\+"; then
		die "-v option must be in format linux<version>"
	fi

	_linux_series="$LINUX_VERSION"
	PACKAGE_LIST="$PACKAGE_LIST $LINUX_VERSION"
else # Otherwise find latest stable version from linux meta-package
	_linux_series=$(XBPS_ARCH=$BASE_ARCH $XBPS_QUERY_CMD -r "$ROOTFS" ${XBPS_REPOSITORY:=-R} -x linux | grep 'linux[0-9._]\+')
fi

_kver=$(XBPS_ARCH=$BASE_ARCH $XBPS_QUERY_CMD -r "$ROOTFS" ${XBPS_REPOSITORY:=-R} -p pkgver ${_linux_series})
KERNELVERSION=$($XBPS_UHELPER_CMD getpkgversion ${_kver})

if [ "$?" -ne "0" ]; then
	die "Failed to find kernel package version"
fi
if ((MAKE_X)); then
    if ((MAKE_XFCE_BASE)); then
        : ${OUTPUT_FILE="void-live-xfce-base-${BASE_ARCH}-${KERNELVERSION}-$(sh_diahora).iso"}
    elif ((MAKE_XFCE_BASE)); then
        : ${OUTPUT_FILE="void-live-xfce-custom-${BASE_ARCH}-${KERNELVERSION}-$(sh_diahora).iso"}
    elif ((MAKE_AWESOME)); then
        : ${OUTPUT_FILE="void-live-awesome-custom-${BASE_ARCH}-${KERNELVERSION}-$(sh_diahora).iso"}
    fi
else
    : ${OUTPUT_FILE="void-live-base-custom-${BASE_ARCH}-${KERNELVERSION}-$(sh_diahora).iso"}
fi

print_step "Installing software to generate the image..."
install_prereqs

mkdir -p "$ROOTFS"/etc
[ -s data/motd ] && cp data/motd "$ROOTFS"/etc
[ -s data/issue ] && cp data/issue "$ROOTFS"/etc

if [ -n "$IGNORE_PKGS" ]; then
	print_step "Ignoring packages in the rootfs: ${IGNORE_PKGS} ..."
	ignore_packages
fi

print_step "Installing void pkgs into the rootfs..."
install_packages
install_skel
if ((MAKE_X)); then
    install_installer
fi
if ((MAKE_XFCE_CUSTOM)); then
    install_wallpapers
    install_themes
    install_icons
fi
install_usr
install_chili_apps
install_grub_themes
reconfigure_packages
install_pacman
finish_clean

: ${DEFAULT_SERVICE_LIST:=agetty-tty1 agetty-tty2 agetty-tty3 agetty-tty4 agetty-tty5 agetty-tty6 udevd dhcpcd}
print_step "Enabling services..."
enable_services ${DEFAULT_SERVICE_LIST} ${SERVICE_LIST}
if ((MAKE_X)); then
    : ${ADDITIONAL_SERVICE_LIST_BASE:=NetworkManager dbus elogind lxdm polkitd }
   	enable_services ${ADDITIONAL_SERVICE_LIST_BASE}
    if ((MAKE_XFCE_CUSTOM)); then
    	: ${ADDITIONAL_SERVICE_LIST_FULL:=avahi-daemon bluetoothd cupsd irqbalance sshd uuidd }
    	enable_services ${ADDITIONAL_SERVICE_LIST_FULL}
    fi
fi

if [ "${#INCLUDE_DIRS[@]}" -gt 0 ]; then
	print_step "Copying directory structures into the rootfs ..."
	copy_include_directories
fi

print_step "Generating initramfs image ($INITRAMFS_COMPRESSION)..."
generate_initramfs

print_step "Generating isolinux support for PC-BIOS systems..."
generate_isolinux_boot

print_step "Generating GRUB support for EFI systems..."
generate_grub_efi_boot

print_step "Cleaning up rootfs..."
cleanup_rootfs

print_step "Generating squashfs image ($SQUASHFS_COMPRESSION) from rootfs..."
generate_squashfs

print_step "Generating ISO image..."
generate_iso_image

hsize=$(du -sh "$OUTPUT_FILE" | awk '{print $1}')
info_msg "${green}Created $(readlink -f "$OUTPUT_FILE") ($hsize) successfully.${reset}"
