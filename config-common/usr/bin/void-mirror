#!/usr/bin/env bash
#shellcheck disable=SC2016,SC2154,SC2155,SC2145,SC2034,SC2001,SC2188,SC2320

#  void-install
#  Created: 2023/01/22
#  Altered: 2024/03/08
#
#  Copyright (c) 2022-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=void-mirror

#debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e

#system
readonly APP="${0##*/}"
readonly _VERSION_='1.1.30-20240308'
readonly DEPENDENCIES=(wget curl dialog cat sed grep printf)
declare -gA Aidioma=([pt_BR]=0 [en_US]=1 [de_DE]=2 [fr_FR]=3 [es_ES]=4 [it_IT]=5)
declare -gA Alocale=([0]=pt_BR [1]=en_US [2]=de_DE [3]=fr_FR [4]=es_ES [5]=it_IT)
declare -gA Amirrors
declare -gi quiet=0 grafico=1 ncontador=0
declare _MIRROR="repo-fastly.voidlinux.org"
declare BOOTLOG
declare distro
distro=$(uname -n)
declare Interrupted
Interrupted="$(gettext "Interrompido! Saindo...")"
trap 'printf "\n${red}$Interrupted\n"; cleanup; exit 0' INT TERM HUP

function debug() {
	whiptail \
		--fb \
		--clear \
		--backtitle "[debug]$0" \
		--title "[debug]$0" \
		--yesno "${*}\n" \
		0 40
	result=$?
	if ((result)); then
		exit
	fi
	return $result
}

info_msg() {
	printf "%s" "\033[1m$*\n\033[m"
}

cleanup() {
	info_msg "$(gettext "Removendo arquivos temporários...")"
	rm -fv "$BOOTLOG"
	exit 1
}

sh_ambiente() {
	declare url_mirror='http://void.chililinux.com/voidlinux/'
	readonly true=1
	readonly false=0
	readonly err_fatal=$true
	readonly err_not_fatal=$false
	BOOTLOG="/tmp/void-mirror-$(sh_diahora).log"
	ccabec="$APP v${_VERSION_}"
	DIALOG='dialog'
	MIRRORPATH='/usr/share/xmirror/'
	MIRRORFILE='mirrors.lst'
	MIRRORURL="https://xmirror.voidlinux.org/raw/$MIRRORFILE"
	MIRRORLIST="$MIRRORPATH$MIRRORFILE"

	# flag languages
	PT_BR=0
	: "${EN_US=1}"
	: "${DE_DE=2}"
	: "${FR_FR=3}"
	: "${LC_DEFAULT=$(sh_getlocale)}"

	# flag dialog exit status codes
	: "${D_OK=0}"
	: "${D_CANCEL=1}"
	: "${D_HELP=2}"
	: "${D_EXTRA=3}"x
	: "${D_ITEM_HELP=4}"
	: "${D_ESC=255}"

	# dialog colors
	: "${BLACK="\Z0"}"
	: "${GREEN="\Z2"}"
	: "${YELLOW="\Z3"}"
	: "${MAGENTA="\Z5"}"
	: "${REVERSE="\Zr"}"
	: "${UNDERLINE="\Zu"}"

   # dialog colors
    GREEN="\Z2"
    MAGENTA="\Z5"
    REVERSE="\Zr"
    UNDERLINE="\Zu"
    BLACK="\Z0"
    YELLOW="\Z3"
    WHITE="\Z7"
    BLUE="\Z4"
    CYAN="\Z6"
    RED="\Z1"
    BOLD="\Zb"
    RESET="\Zn"
	: echo "$err_fatal"

	if [ -z "${COLUMNS}" ]; then
		COLUMNS=$(stty size)
		COLUMNS=${COLUMNS##* }
	fi
	if [ "${COLUMNS}" = "0" ]; then
		COLUMNS=80
	fi
	COL=$((COLUMNS - 8))
	SET_COL="\\033[${COL}G" # at the $COL char
	CURS_ZERO="\\033[0G"
}

sh_check_mirror_path() {
	msg "MIRROR PATH" "$(gettext "verificando caminho") $MIRRORPATH"
	if ! test -d "${MIRRORPATH}"; then
		mkdir -p "${MIRRORPATH}" >>"$BOOTLOG"
	fi
}

sh_disableprintk() {
	if [ -w /proc/sys/kernel/printk ]; then
		echo 0 >/proc/sys/kernel/printk
	fi
}

sh_enableprintk() {
	if [ -w /proc/sys/kernel/printk ]; then
		echo 4 >/proc/sys/kernel/printk
	fi
}

sh_ascii_lines() {
	if [[ "$LANG" =~ 'UTF-8' ]]; then
		export NCURSES_NO_UTF8_ACS=0
	else
		export NCURSES_NO_UTF8_ACS=1
	fi
}

sh_checkroot() {
	if [ "$(id -u)" != "0" ]; then
		die "${red} ${cmsg_operRoot[$LC_DEFAULT]}"
	fi
}

sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}${cmsg_ERRO[$LC_DEFAULT]}${reset}: ${cmsg_CommandNotFound[$LC_DEFAULT]} ${cyan}'$d'${reset}"
	done
	if ((errorFound)); then
		echo "${yellow}--------------${cmsg_ImpossivelContinuar[$LC_DEFAULT]}-------------${reset}"
		echo "${cmsg_ImpossivelContinuar1[$LC_DEFAULT]}" >&2
		echo "${cmsg_ImpossivelContinuar2[$LC_DEFAULT]} \$PATH" >&2
		echo "${yellow}-----------------------------------------------${reset}"

		if [[ "$distro" = @(void|void-live|voidlinux) ]]; then
			echo
			if readconf "${yellow}${cmsg_InstCommand[$LC_DEFAULT]} '${cyan}${missing[*]}${reset}' ?"; then
				if xbps-install -Sy "${missing[@]}"; then
					errorFound=0
					sh_checkDependencies
				else
					die "${cmsg_RunNewErro[$LC_DEFAULT]}"
				fi
			fi
		else
			die "${cmsg_ERRO[$LC_DEFAULT]}: ${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..."
		fi
	fi
}

sh_setvarcolors() {
	# does the terminal support true-color?
	if [[ -n $(command -v "tput") ]]; then
		#tput setaf 127 | cat -v  #capturar saida
		tput sgr0 # reset colors
		reset=$(tput sgr0)
		bold=$(tput bold)
		black=$(tput setaf 0)
		red=$(tput setaf 1)
		green=$(tput setaf 2)
		yellow=$(tput bold)$(tput setaf 3)
		blue=$(tput setaf 4)
		pink=$(tput setaf 5)
		cyan=$(tput setaf 6)
		white=$(tput setaf 7)
		orange=$(tput setaf 3)
		purple=$(tput setaf 125)
		violet=$(tput setaf 61)
	else
		reset="\e[0m"
		bold="\e[1m"
		italic="\e[3m"
		underline="\e[4m"
		red="\e[31m"
		green="\e[32m"
		yellow="\e[33m"
		blue="\e[34m"
		pink="\e[35m"
		cyan="\e[36m"
		gray="\e[90m"
		white="\e[97m"
	fi
}

sh_unsetvarcolors() {
	unset reset green red bold blue cyan
	unset orange pink white yellow purple violeta
	sh_logprefix
}

sh_logprefix() {
	NORMAL="${reset}"
	SUCCESS="${green}"
	WARNING="${yellow}"
	FAILURE="${red}"
	INFO="${cyan}"
	BRACKET="${blue}"
	BMPREFIX=""
	DOTPREFIX="  ${blue}::${reset} "
	SUCCESS_PREFIX="${SUCCESS}  ↑  ${NORMAL}"
	SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
	FAILURE_PREFIX="${FAILURE}  ↓  ${NORMAL}"
	FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
	WARNING_PREFIX="${WARNING}  W  ${NORMAL}"
	WARNING_SUFFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"
	SKIP_PREFIX="${INFO}  S  ${NORMAL}"
	SKIP_SUFFIX="${BRACKET}[${INFO} SKIP ${BRACKET}]${NORMAL}"
	WAIT_PREFIX="${WARNING}  R  ${NORMAL}"
	WAIT_SUFFIX="${BRACKET}[${WARNING} WAIT ${BRACKET}]${NORMAL}"
}

replicate() {
	local Var
	printf -v Var %"$2s" " "
	echo "${Var// /$1}"
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
}

msg() {
	((++ncontador))
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<<"$last_msg")
	printf "%s\n" "$(timespec) [ INFO ]${2}" >>"$BOOTLOG"

	if ((grafico)); then
		${DIALOG} \
			--colors \
			--no-collapse \
			--title "$1" \
			--backtitle "$ccabec" \
			--infobox "\n$2" \
			8 60
	else
		log_info_msg "$(fmt) $2"
	fi
}

fmt() {
	printf "${bold}${yellow}%03d/%03d${reset}" "$ncontador" "$ncontador"
	return $?
}

log_info_msg() {
	last_msg="$*"

	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${*}"
	fi
	return 0
}

evaluate_retval() {
	local error_value="$?"
	local error_fatal="$2"
	local cmsgdie="$3"

	[[ -z "$error_fatal" ]] && error_fatal=$true

	if [ $# -gt 0 ]; then
		error_value="$1"
	fi

	if [ "${error_value}" = 0 ]; then
		log_success_msg ''
	else
		log_failure_msg ''
	fi

	if ((error_value)); then
		if ((error_fatal)); then
			if [[ -z "$cmsgdie" ]]; then
				die "${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..."
			else
				die "$cmsgdie"
			fi
		fi
	fi
	return "${error_value}"
}

log_failure_msg() {
	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${*}"
		echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
	fi
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<<"$last_msg")
	printf "%s\n" "$(timespec) [ FAIL ]${logmessage}" >>"$BOOTLOG"
	replicate "#" "100" >>"$BOOTLOG"
	return 0
}

log_success_msg() {
	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${*}"
		echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
	fi
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<<"$last_msg")
	printf "%s\n" "$(timespec) [  OK  ]${logmessage}" >>"$BOOTLOG"
	replicate "#" "100" >>"$BOOTLOG"
	return 0
}

timespec() {
	STAMP="$(date +"%b %d %T %:z") $(hostname)"
	echo "$STAMP"
	return 0
}

die() {
	if test $# -ge 2; then
		evaluate_retval 1
	fi
	local msg=$1
	shift
	printf "%-75s\n" "$(DOT)${bold}${red}$msg${reset}" >&2
	sh_enableprintk
	exit 1
}

readconf() {
	if [[ $LC_DEFAULT -eq 0 ]]; then
		read -r -p "$1 [S/n]"
	else
		read -r -p "$1 [Y/n]"
	fi
	[[ ${REPLY^} == "" ]] && return "$false"
	[[ ${REPLY^} == N ]] && return "$true" || return "$false"
}

info() {
	${DIALOG} \
		--colors \
		--title "$1" \
		--backtitle "$ccabec" \
		--ok-label "${cmsg_ok[$LC_DEFAULT]}" \
		--msgbox "$2\n$3\n$4\n$5\n$6" \
		10 75
}

alerta() {
	log_success_msg "$@"
	${DIALOG} \
		--colors \
		--title "$1" \
		--backtitle "$ccabec" \
		--ok-label "${cmsg_ok[$LC_DEFAULT]}" \
		--msgbox "$2\n$3\n$4\n$5\n$6" \
		10 110
}

conf() {
	xtitle="$1"
	shift
	${DIALOG} \
		--colors \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		0 0
	nchoice=$?
	return "$nchoice"
}

notconf() {
	xtitle="$1"
	shift
	${DIALOG} \
		--colors \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		10 100
	return $?
}

sh_diahora() {
	DIAHORA=$(date +"%d%m%Y-%T" | sed 's/://g')
	printf "%s\n" "$DIAHORA"
}

now() {
	printf "%(%m-%d-%Y %H:%M:%S)T\n" "$(date +%s)"
}

sh_timedatectl() {
	local _localtime

	if [[ -n $(command -v timedatectl) ]]; then
		_localtime=$(awk '{print $3}' <(grep 'Time zone' <(timedatectl)))
		if [[ -n "$_localtime" ]]; then
			echo "$_localtime"
			return 0
		fi
	else
		_localtime=$(cut -d'"' -f2 <(grep TIMEZONE /etc/rc.conf))
		if [[ -n "$_localtime" ]]; then
			echo "$_localtime"
			return 0
		fi
	fi
	return 1
}

sh_version() {
	printf "%s\n" "${bold}${cyan}${0##*/} v${_VERSION_}${reset}"
}

strtoarray() {
	local anew
	IFS=' ' read -r -a anew <<<"$1"
	echo "${anew[@]}"
}

lenarraystr() {
	local new=$1
	read -ra ADDR <<<"$new"
	echo "${#ADDR[@]}"
}

scrend() {
	exit "$1"
}

sh_main() {
	while true; do
		i18=$(${DIALOG} \
			--stdout \
			--default-item "$LC_DEFAULT" \
			--clear \
			--backtitle "$ccabec" \
			--title "${welcome[$LC_DEFAULT]}" \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_Sair[$LC_DEFAULT]}" \
			--menu "\n${escolhaIdioma[$LC_DEFAULT]}:" \
			0 80 0 \
			0 "$(gettext "Português")" \
			1 "$(gettext "English")" \
			2 "$(gettext "Deustch")" \
			3 "$(gettext "Français")" \
			4 "$(gettext "Español")" \
			5 "$(gettext "Italiano")")

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			scrend 0
			;;
		esac
		LC_DEFAULT="$i18"
		LOCALE="${Alocale[$i18]}"
		#       sh_choosemirror "$@"
		break
	done
}

sh_getlocale() {
	local lc

	LC_DEFAULT="${Aidioma[pt_BR]}"
	LOCALE="pt_BR"
	#	if lc=$(grep _ <(locale -a) | head -1 | cut -c1-5); then
	#		LOCALE="$lc"
	#		LC_DEFAULT="${Aidioma[$lc]}"
	#	fi
}

sh_getRegion() {
	case "$1" in
	AF) echo "Africa" ;;
	AN) echo "Antarctica" ;;
	AS) echo "Asia" ;;
	EU) echo "Europe" ;;
	NA) echo "North America" ;;
	OC) echo "Oceania" ;;
	SA) echo "South and Central America" ;;
	World) echo "Globally Available" ;;
	*) echo "$1" ;;
	esac
}

sh_getMirrors() {
	local line
	local region
	local url
	local location
	local tier
	local var

	if ! test -e "$MIRRORLIST"; then
		alerta "$(gettext "LISTA DE ESPELHOS")" "\n${RED}$(gettext "Não é possível continuar!")${RESET}" \
			"$(gettext "Arquivo de lista de espelhos não encontrado no caminho") : ${BLUE}$MIRRORLIST${RESET}"
		return 1
	fi

	while read -r line; do
	    first_field=$(echo "$line" | awk '{print $1}')  # Extrai o primeiro campo usando awk
		[[ "$line" = '#'* ]] && continue
		while IFS=$'\t\n' LC_ALL=C read -r rg url location tier; do
			region="$first_field"
			var="${url##http://}"
			var="${var##https://}"
			var="${var%%\/*}"
			tier=$(echo "$tier" | tr -d '\r') # O caractere ^M representa a tecla Enter, ou seja, a quebra de linha no formato DOS/Windows
			Amirrors+=(["$var"]="$url|$(sh_getRegion "$region")|$location|$tier")
		done <<< "$line"
	done <"$MIRRORLIST"
}

sh_choosemirror() {
	declare -A Aflag
	local exit_status
	local array
	local x
	local sep="\xe2\x94\x82"
	local fields
	local -i REPOSITORY=1
	local -i REGION=2
	local -i LOCATION=3
	local -i TIER=4
	local main_file='/etc/xbps.d/00-repository-main.conf'
	local mirror
	local mirror0
	local mirror1
	local mirror2

	Amirrors+=([void.chililinux.com_2]="https://void.chililinux.com/voidlinux/|South and Central America|Pimenta Bueno, Brazil|2|")
	Amirrors+=([chililinux.com/void]="https://chililinux.com/void/|South and Central America|Hostinger, Brazil|2|")
	while true; do
		array=()
		sorted_list=$(for key in "${!Amirrors[@]}"; do echo "$key|${Amirrors[$key]}"; done | sort -t\| -k5 -k3)
		while IFS='|' LC_ALL=C read -r -a fields; do
			key="${fields[0]}"
			[[ "$_MIRROR" = "$key" ]] && Aflag["$key"]='on' || Aflag["$key"]='off'
			array+=("$key" "$(printf "$sep%-6s$sep%-25s$sep%-23s$sep%-s" \
				"Tier ${fields[TIER]}" \
				"${fields[REGION]}" \
				"${fields[LOCATION]}" \
				"${fields[REPOSITORY]}")"
			"${Aflag[$key]}")
		done <<<"${sorted_list[@]}"

		mirror=$(${DIALOG} --title "${cmsg_Espelho[LC_DEFAULT]}" \
			--backtitle "$ccabec" \
			--default-item "${_MIRROR}" \
			--colors \
			--clear \
			--cancel-label "${cmsg_Sair[$LC_DEFAULT]}" \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--extra-button --extra-label "void-testmirror" \
			--checklist "${cmsg_LABEL[$LC_DEFAULT]}" \
			0 0 0 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return 1
			;;
		3)
			oldgrafico=$grafico
			grafico=$true
			if [[ -n $(command -v void-testmirror) || -n $(command -v ./void-testmirror) ]]; then
				msg "$(gettext "=== ESPELHO ===") void-testmirror" "$(log_info_msg "$(gettext "Aguarde...") ${cmsg_Gerando[$LC_DEFAULT]} $(gettext "testando com") void-mirror ${xurl}")"
				result=$(void-testmirror --nocolor --ping --quiet)
				evaluate_retval "$?" "$err_not_fatal"
				[[ -z "$result" ]] && result="${RED}ERRO DESCONHECIDO: void-testmirror $(gettext "não retornou resultado")${RESET}"
				info "$(gettext "=== ESPELHO ===") void-testmirror" "\n${BOLD}${WHITE}$result"
			else
				msg "INFO" "$(log_info_msg "$(gettext "Aguarde...") ${cmsg_Gerando[$LC_DEFAULT]} $(gettext "testando com") void-mirror ${xurl}")"
				evaluate_retval "1" "$err_not_fatal"
				info "$(gettext "=== ESPELHO ===") void-testmirror" "\n${RED}void-testmirror $(gettext "não foi localizado no") \$PATH${RESET}" \
					"${RED}void-testmirror $(gettext "não foi localizado em") $PWD!${RESET}"
			fi
			grafico=$oldgrafico
			continue
			;;
		esac
		_MIRROR=($(strtoarray "$mirror"))
		mirror0=${_MIRROR[0]}
		mirror1=${_MIRROR[1]}
		mirror2=${_MIRROR[2]}
		if conf "${cmsg_Espelho[LC_DEFAULT]}" \
			"\n${BOLD}${CYAN}Mirror     : $mirror0 | $mirror1 | $mirror2" \
			"\n${BOLD}${CYAN}Url Mirror : $(sh_splitarray "${Amirrors[$mirror0]}" 1) | $(sh_splitarray "${Amirrors[$mirror1]}" 1) | $(sh_splitarray "${Amirrors[$mirror2]}" 1)" \
			"\n${BOLD}${CYAN}Region     : $(sh_splitarray "${Amirrors[$mirror0]}" 2) | $(sh_splitarray "${Amirrors[$mirror1]}" 2) | $(sh_splitarray "${Amirrors[$mirror2]}" 2)" \
			"\n${BOLD}${CYAN}Location   : $(sh_splitarray "${Amirrors[$mirror0]}" 3) | $(sh_splitarray "${Amirrors[$mirror1]}" 3) | $(sh_splitarray "${Amirrors[$mirror2]}" 3)\n" \
			"\n${RED}$(gettext "Deseja definir/alterar o espelho deste host para o(s) escolhido(s) ?")${RESET}\n\n"; then

			mkdir -p "/etc/xbps.d/"
			mv -f "${main_file}" "${main_file}.old"
			#			echo "" > "${main_file}"
			for i in "${_MIRROR[@]}"; do
				url_mirror="$(sh_splitarray "${Amirrors[$i]}" 1)"
				clocation="$(sh_splitarray "${Amirrors[$i]}" 3)"
				msg "INFO" "$(log_info_msg "${cmsg_Configurando[$LC_DEFAULT]}: ${main_file}")"
				{
					echo repository="${url_mirror}current"
					[[ "$clocation" =~ .*Pimenta* ]] && echo repository="${url_mirror}current/extras"
					[[ "$clocation" =~ .*Hostinger* ]] && continue
					echo repository="${url_mirror}current/nonfree"
					echo repository="${url_mirror}current/multilib"
					echo repository="${url_mirror}current/multilib/nonfree"
					echo
				} >>"${main_file}"
				# evaluate_retval "$?"
			done
			sh_sync_mirrors
		fi
		return 0
	done
}

sh_download_mirrors_list() {
	require_util() {
		command -v "$1" >/dev/null 2>&1 || oops "você não tem '$1' instalado, que é preciso para $2"
	}
	if command -v curl >/dev/null 2>&1; then
		cmdfetch() { curl --compressed --silent --continue-at - --insecure -L "$1" -o "$2"; return $?; }
	elif command -v wget >/dev/null 2>&1; then
		cmdfetch() { wget --quiet -c "$1" -O "$2"; return $?; }
	else
		require_util curl "downloader"
		require_util wget "downloader"
	fi

	msg "$(gettext "BAIXAR LISTA DE ESPELHOS")" "$(gettext "buscando nova lista de espelhos em") ${MIRRORURL}"
	if ! cmdfetch "$MIRRORURL" "$MIRRORLIST"; then
		alerta "$(gettext "BAIXAR LISTA DE ESPELHOS")" \
			"\n${RED}${REVERSE}$(gettext "Verifique sua conexão com a internet")${RESET}" \
			"$(gettext "Incapaz de buscar uma nova lista de espelhos de") : ${BLUE}${REVERSE}$MIRRORURL${RESET}" \
  			"$(gettext "Tentando usar a lista local")                     : ${BLUE}${REVERSE}$MIRRORLIST"
		return 1
	fi
	return 0
}

sh_splitarray() {
	local str="$1"
	local pos="$2"
	local sep="${3:-'|'}"
	local array

	[[ $# -eq 3 && "$pos" = "|" && "$sep" =~ ^[0-9]+$ ]] && {
		sep="$2"
		pos="$3"
	}
	[[ $# -eq 2 && "$pos" = "$sep" ]] && {
		sep="$pos"
		pos=1
	}
	[[ $# -eq 1 || ! "$pos" =~ ^[0-9]+$ ]] && { pos=1; }

	IFS="$sep" read -r -a array <<<"$str"
	echo "${array[pos - 1]}"
}

sh_sync_mirrors() {
	xbps-install -S | $DIALOG \
		--backtitle "$ccabec - ${cmsg_Atualizando[LC_DEFAULT]}" \
		--title "${cmsg_Atualizando[LC_DEFAULT]}" \
		--programbox 20 110
	exit 0
}

sh_language() {
	#	langmsg=('lang=("pt_BR"	"en_US" "de_DE" "fr_FR" "es_ES" "it_IT")')
	#	for xmsg in "${langmsg[@]}"; do eval "$xmsg"; done
	#	#echo "lang       ${#lang[@]} ${lang[@]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	#	#echo "cmsg_ERRO ${#cmsg_ERRO[@]} ${cmsg_ERRO[@]} ${cmsg_ERRO[$PT_BR]} ${cmsg_ERRO[$EN_US]}"

	cmsg_operRoot[pt_BR]=$(gettext "erro: você não pode realizar esta operação a menos que seja root.")
	cmsg_ERRO[pt_BR]=$(gettext "ERRO")
	cmsg_CommandNotFound[pt_BR]=$(gettext "não encontrei o comando")
	cmsg_ImpossivelContinuar[pt_BR]=$(gettext "IMPOSSÍVEL CONTINUAR")
	cmsg_ImpossivelContinuar1[pt_BR]=$(gettext "Esse script precisa dos comandos listados acima")
	cmsg_ImpossivelContinuar2[pt_BR]=$(gettext "Instale-os e/ou verifique se estão no seu")
	cmsg_InstCommand[pt_BR]=$(gettext "Instalar o(s) comando(s)")
	cmsg_RunNew[pt_BR]=$(gettext "INFO: Rode novamente o aplicativo")
	cmsg_RunNewErro[pt_BR]=$(gettext "ERRO na instalação dos comandos. Tente manualmente.")
	cmsg_InstalacaoAbortada[pt_BR]=$(gettext "Instalação abortada")
	cmsg_ok[pt_BR]=$(gettext "Ok")
	cmsg_Aceitar[pt_BR]=$(gettext "Aceitar")
	cmsg_Sair[pt_BR]=$(gettext "Sair")
	cmsg_yeslabel[pt_BR]=$(gettext "Sim")
	cmsg_nolabel[pt_BR]=$(gettext "Não")
	cmsg_Gerando[pt_BR]=$(gettext "Gerando")
	cmsg_Atualizando[pt_BR]=$(gettext "Atualizando espelhos...")
	cmsg_LABEL1[pt_BR]=$(gettext "Usar as setas ↑ e ↓ para navegar.")
	cmsg_LABEL2[pt_BR]=$(gettext "Usar TAB para alternar entre os botões.")
	cmsg_LABEL3[pt_BR]=$(gettext "Usar ENTER ou BARRA DE ESPAÇO para selecionar e aceitar.")
	cmsg_LABEL[pt_BR]="${cmsg_LABEL1[pt_BR]}\n${cmsg_LABEL2[pt_BR]}\n${cmsg_LABEL3[pt_BR]}"
	cmsg_Configurando[pt_BR]=$(gettext "Configurando espelho em")
	cmsg_Espelho[pt_BR]=$(gettext "=== ESPELHO ===")
}

sh_ambiente
sh_getlocale
sh_language
sh_setvarcolors
sh_ascii_lines
sh_logprefix
sh_checkDependencies
sh_check_mirror_path
sh_disableprintk
[[ "$1" = @(-V|-v|version|-version|--version) ]] && {
	sh_version
	exit $(($# ? 0 : 1))
}
#sh_main "$@"
sh_checkroot
sh_download_mirrors_list
sh_getMirrors
sh_choosemirror "$@"
sh_enableprintk
