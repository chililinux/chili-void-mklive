#!/usr/bin/env bash
#shellcheck disable=SC2016,SC2154,SC2155,SC2145,SC2034,SC2001,SC2317,SC2207,SC2164,SC2059

#  void-services
#  Created: 2023/01/23
#  Altered: 2024/03/08
#
#  Copyright (c) 2022-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
############################################################################
#export LANGUAGE=pt_BR
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=void-services

#debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

#system
readonly APP="${0##*/}"
readonly _VERSION_='0.6.01-20240308'
readonly distro=$(uname -n)
readonly DEPENDENCIES=(dialog cat sed grep printf)
declare -A Aidioma=([pt_BR]=0 [en_US]=1 [de_DE]=2 [fr_FR]=3 [es_ES]=4 [it_IT]=5)
declare -A Alocale=([0]=pt_BR [1]=en_US [2]=de_DE [3]=fr_FR [4]=es_ES [5]=it_IT)
declare -i quiet=0
declare -i grafico=1
declare -i ncontador=0
declare -i STEP_COUNT=10
declare Interrupted="$(gettext "Interrompido! Saindo...")"
trap 'printf "\n${red}$Interrupted\n"; cleanup; exit 0' INT TERM HUP

cleanup() {
	info_msg "${yellow}$(gettext "Removindo arquivos temporários")...${reset}"
	rm -f "$BOOTLOG"
	sh_enableprintk
	exit 1
}

sh_setvarcolors() {
	if [[ -n $(command -v "tput") ]]; then
		#tput setaf 127 | cat -v  #capturar saida
		#tput sgr0 # reset colors
		bold=$(tput bold)
		reset=$(tput sgr0)
		black=$(tput setaf 0)
		red=$(tput setaf 1)
		green=$(tput setaf 2)
		yellow=$(tput bold)$(tput setaf 3)
		blue=$(tput setaf 4)
		pink=$(tput setaf 5)
		cyan=$(tput setaf 6)
		white=$(tput setaf 7)
		orange=$(tput setaf 3)
		purple=$(tput setaf 125)
		violet=$(tput setaf 61)
	else
		sh_unsetvarcolors
	fi
}

sh_unsetvarcolors() {
	unset reset green red bold blue cyan orange
	unset pink white yellow violet purple
	sh_setlogprefix
}

sh_setlogprefix() {
	NORMAL="${reset}"
	SUCCESS="${green}"
	WARNING="${yellow}"
	FAILURE="${red}"
	INFO="${cyan}"
	BRACKET="${blue}"
	BMPREFIX=""
	DOTPREFIX="  ${blue}::${reset} "
	SUCCESS_PREFIX="${SUCCESS}  ↑  ${NORMAL}"
	SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
	FAILURE_PREFIX="${FAILURE}  ↓  ${NORMAL}"
	FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
	WARNING_PREFIX="${WARNING}  W  ${NORMAL}"
	WARNING_SUFFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"
	SKIP_PREFIX="${INFO}  S  ${NORMAL}"
	SKIP_SUFFIX="${BRACKET}[${INFO} SKIP ${BRACKET}]${NORMAL}"
	WAIT_PREFIX="${WARNING}  R  ${NORMAL}"
	WAIT_SUFFIX="${BRACKET}[${WARNING} WAIT ${BRACKET}]${NORMAL}"
}

strzero() {
	printf "%0*d" "$2" "$1"
}

print_step() {
	CURRENT_STEP=$((CURRENT_STEP + 1))
	info_msg "[${CURRENT_STEP}/${STEP_COUNT}] $@"
}

info_msg() {
	printf "\033[1m$@\n\033[m"
}

sh_setambiente() {
	readonly true=1
	readonly false=0
	readonly err_fatal=$true
	readonly err_not_fatal=$false
	readonly BOOTLOG="/tmp/$APP-$(sh_diahora).log"
	: "${ccabec="$APP v${_VERSION_}"}"
	: "${DIALOG=${DIALOG:-"dialog"}}"

	# flag languages
	: PT_BR=0
	: "${EN_US=1}"
	: "${DE_DE=2}"
	: "${FR_FR=3}"
	: "${ES_ES=4}"
	: "${IT_IT=5}"
	: "${LC_DEFAULT=$(sh_getLocale)}"

	# flag dialog exit status codes
	: "${D_OK=0}"
	: "${D_CANCEL=1}"
	: "${D_HELP=2}"
	: "${D_EXTRA=3}"x
	: "${D_ITEM_HELP=4}"
	: "${D_ESC=255}"

	# dialog colors
	: "${BLACK="\Z0"}"
	: "${GREEN="\Z2"}"
	: "${YELLOW="\Z3"}"
	: "${BLUE="\Z4"}"
	: "${MAGENTA="\Z5"}"
	: "${WHITE="\Z7"}"
	: "${REVERSE="\Zr"}"
	: "${UNDERLINE="\Zu"}"
	CYAN="\Z6"
	RED="\Z1"
	BOLD="\Zb"
	RESET="\Zn"
	: echo "$err_fatal"

	if [ -z "${COLUMNS}" ]; then
		COLUMNS=$(stty size)
		COLUMNS=${COLUMNS##* }
	fi
	if [ "${COLUMNS}" = "0" ]; then
		COLUMNS=80
	fi
	COL=$((COLUMNS - 8))
	SET_COL="\\033[${COL}G" # at the $COL char
	CURS_ZERO="\\033[0G"
}

sh_disableprintk() {
	if [ -w /proc/sys/kernel/printk ]; then
		echo 0 >/proc/sys/kernel/printk
	fi
}

sh_enableprintk() {
	if [ -w /proc/sys/kernel/printk ]; then
		echo 4 >/proc/sys/kernel/printk
	fi
}

sh_setascii_lines() {
	if [[ "$LANG" =~ 'UTF-8' ]]; then
		export NCURSES_NO_UTF8_ACS=0
	else
		export NCURSES_NO_UTF8_ACS=1
	fi
}

sh_checkroot() {
	if [ "$(id -u)" != "0" ]; then
		die "${red} ${cmsg_operRoot[$LC_DEFAULT]}"
	fi
}

sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}${cmsg_ERRO[$LC_DEFAULT]}${reset}: ${cmsg_CommandNotFound[$LC_DEFAULT]} ${cyan}'$d'${reset}"
	done
	if ((errorFound)); then
		echo "${yellow}--------------${cmsg_ImpossivelContinuar[$LC_DEFAULT]}-------------${reset}"
		echo "${cmsg_ImpossivelContinuar1[$LC_DEFAULT]}" >&2
		echo "${cmsg_ImpossivelContinuar2[$LC_DEFAULT]} \$PATH" >&2
		echo "${yellow}-----------------------------------------------${reset}"

		if [[ "$distro" != @(void|void-live|voidlinux) ]]; then
			echo
			if readconf "${yellow}${cmsg_InstCommand[$LC_DEFAULT]} '${cyan}${missing[*]}${reset}'?"; then
				if xbps-install -S "${missing[@]}"; then
					die "${cmsg_RunNew[$LC_DEFAULT]}"
				else
					die "${cmsg_RunNewErro[$LC_DEFAULT]}"
				fi
			fi
		fi
		die "${cmsg_ERRO[$LC_DEFAULT]}: ${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..."
	fi
}

replicate() {
	local Var
	printf -v Var %"$2s" " "
	echo "${Var// /$1}"
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
}

msg() {
	((++ncontador))
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<<"$last_msg")
	printf "%s\n" "$(timespec) [ INFO ]${2}" >>"$BOOTLOG"

	if ((grafico)); then
		${DIALOG} \
			--no-collapse \
			--title "$1" \
			--backtitle "$ccabec" \
			--infobox "\n$2" \
			8 60
	else
		log_info_msg "$(fmt) $2"
	fi
}

fmt() {
	printf "${bold}${yellow}%03d/%03d${reset}" "$ncontador" "$ncontador"
	return $?
}

log_info_msg() {
	last_msg="$*"

	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${@}"
	fi
	return 0
}

evaluate_retval() {
	local error_value="$?"
	local error_fatal="$2"
	local cmsgdie="$3"

	[[ -z "$error_fatal" ]] && error_fatal=$true

	if [ $# -gt 0 ]; then
		error_value="$1"
	fi

	if [ "${error_value}" = 0 ]; then
		log_success_msg ''
	else
		log_failure_msg ''
	fi

	if ((error_value)); then
		if ((error_fatal)); then
			if [[ -z "$cmsgdie" ]]; then
				die "${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..."
			else
				die "$cmsgdie"
			fi
		fi
	fi
	return "${error_value}"
}

log_failure_msg() {
	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${@}"
		echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
	fi
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<<"$last_msg")
	printf "%s\n" "$(timespec) [ FAIL ]${logmessage}" >>"$BOOTLOG"
	replicate "#" "100" >>"$BOOTLOG"
	return 0
}

log_success_msg() {
	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${@}"
		echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
	fi
	logmessage=$(sed 's/\\\033[^a-zA-Z]*.//g' <<<"$last_msg")
	printf "%s\n" "$(timespec) [  OK  ]${logmessage}" >>"$BOOTLOG"
	replicate "#" "100" >>"$BOOTLOG"
	return 0
}

timespec() {
	STAMP="$(date +"%b %d %T %:z") $(hostname)"
	echo "$STAMP"
	return 0
}

die() {
	if test $# -ge 2; then
		evaluate_retval 1
	fi
	local msg=$1
	shift
	printf "%-75s\n" "$(DOT)${bold}${red}$msg${reset}" >&2
	sh_enableprintk
	exit 1
}

conf() {
	xtitle="$1"
	shift
	${DIALOG} \
		--colors \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		8 75
	nchoice=$?
	return "$nchoice"
}

readconf() {
	local pNo="${cmsg_nolabel[$LC_DEFAULT]:0:1}"
	local pYes="${cmsg_yeslabel[$LC_DEFAULT]:0:1}"
	local prompt="[$pYes/${pNo,,}]"
	local ctype='S'
	local lEmpty=$false
	local lNo=$true
	local lYes=$false

	if test $# -ge 2; then
		ctype="$2"
		[[ "$ctype" = 'N' ]] && {
			prompt="[$pNo/${pYes,,}]"
			lEmpty=$true
			lNo=$true
			lYes=$false
		}
	fi

	read -r -p "$1 $prompt"
	[[ ${REPLY^} == "" ]] && return "$lEmpty"
	[[ ${REPLY^} == "$pNo" ]] && return "$lNo"
	[[ ${REPLY^} == "$pYes" ]] && return "$lYes" || return "$lNo"
}

readnotconf() {
	readconf "$1" 'N'
}

info() {
	${DIALOG} \
		--colors \
		--title "$1" \
		--backtitle "$ccabec" \
		--ok-label "${cmsg_ok[$LC_DEFAULT]}" \
		--msgbox "$2\n$3\n$4\n$5\n$6" \
		0 0
}

display_result() {
    ${DIALOG} \
        --colors \
        --title "$2" \
        --backtitle "$ccabec" \
        --no-collapse \
        --no-cr-wrap \
        --no-nl-expand \
        --ok-label "${cmsg_ok[$LC_DEFAULT]}" \
        --msgbox "$1" \
        15 100
}

alerta() {
	log_success_msg "$@"
	${DIALOG} \
		--title "$1" \
		--backtitle "$ccabec" \
		--ok-label "${cmsg_ok[$LC_DEFAULT]}" \
		--msgbox "$2\n$3\n$4\n$5\n$6" \
		10 60
}

notconf() {
	xtitle="$1"
	shift
	${DIALOG} \
		--colors \
		--title "$xtitle" \
		--backtitle "$ccabec" \
		--yes-label "${cmsg_nolabel[$LC_DEFAULT]}" \
		--no-label "${cmsg_yeslabel[$LC_DEFAULT]}" \
		--yesno "$*" \
		10 100
	return $?
}

sh_diahora() {
	DIAHORA=$(date +"%d%m%Y-%T" | sed 's/://g')
	printf "%s\n" "$DIAHORA"
}

now() {
	printf "%(%m-%d-%Y %H:%M:%S)T\n" "$(date +%s)"
}

sh_timedatectl() {
	local _localtime

	if [[ -n $(command -v timedatectl) ]]; then
		_localtime=$(awk '{print $3}' <(grep 'Time zone' <(timedatectl)))
		if [[ -n "$_localtime" ]]; then
			echo "$_localtime"
			return 0
		fi
	else
		_localtime=$(cut -d'"' -f2 <(grep TIMEZONE /etc/rc.conf))
		if [[ -n "$_localtime" ]]; then
			echo "$_localtime"
			return 0
		fi
	fi
	return 1
}

sh_version() {
	printf "%s\n" "${bold}${cyan}${0##*/} v${_VERSION_}${reset}"
}

strtoarray() {
	local anew
	IFS=' ' read -r -a anew <<<"$1"
	echo "${anew[@]}"
}

lenarraystr() {
	local new=$1
	read -ra ADDR <<<"$new"
	echo "${#ADDR[@]}"
}

scrend() {
	exit "$1"
}

sh_setlanguage() {
	#	langmsg=('lang=("pt_BR"	"en_US"	"de_DE"	"fr_FR"	"es_ES"	"it_IT")'
	cmsg_LABEL1[pt_BR]="$(gettext "Usar as setas ↑ e ↓ para navegar")"
	cmsg_LABEL2[pt_BR]="$(gettext "Usar TAB para alternar entre os botões")"
	cmsg_LABEL3[pt_BR]="$(gettext "Usar BARRA DE ESPAÇO para selecionar/marcar")"
	cmsg_LABEL4[pt_BR]="$(gettext "Usar ENTER para aceitar/executar")"
	cmsg_MENU[pt_BR]="${cmsg_LABEL1[pt_BR]}\n${cmsg_LABEL3[pt_BR]}\n${cmsg_LABEL2[pt_BR]}\n${cmsg_LABEL4[pt_BR]}"
	cmsg_ERRO[pt_BR]="$(gettext "ERRO")"
	cmsg_operRoot[pt_BR]="$(gettext "erro: você não pode realizar esta operação a menos que seja root.")"
	cmsg_ImpossivelContinuar[pt_BR]="$(gettext "IMPOSSÍVEL CONTINUAR")"
	cmsg_ImpossivelContinuar1[pt_BR]="$(gettext "Esse script precisa dos comandos listados acima")"
	cmsg_ImpossivelContinuar2[pt_BR]="$(gettext "Instale-os e/ou verifique se estão no seu")"
	cmsg_InstCommand[pt_BR]="$(gettext "Instalar o(s) comando(s)")"
	cmsg_RunNew[pt_BR]="$(gettext "INFO: Rode novamente o aplicativo")"
	cmsg_RunNewErro[pt_BR]="$(gettext "ERRO na instalação dos comandos. Tente manualmente.")"
	cmsg_InstalacaoAbortada[pt_BR]="$(gettext "Instalação abortada")"
	cmsg_ok[pt_BR]="$(gettext "Ok")"
	cmsg_yeslabel[pt_BR]="$(gettext "Sim")"
	cmsg_nolabel[pt_BR]="$(gettext "Não")"
	cmsg_descMirror[pt_BR]="$(gettext "Escolher espelho")"
	cmsg_Aceitar[pt_BR]="$(gettext "Aceitar")"
	cmsg_Sair[pt_BR]="$(gettext "Sair")"
	cmsg_Services[pt_BR]="$(gettext "gerenciador de serviços")"
	cmsg_servicosInstalados[pt_BR]="$(gettext "Aguarde... Verificando serviços instalados")"
	cmsg_servicosAtivos[pt_BR]="$(gettext "Aguarde... Verificando serviços ativos")"
	cmsg_servicosnotfound[pt_BR]="$(gettext "Nenhum serviço foi encontrado em")"
	cmsg_welcome[pt_BR]="$(gettext "Bem-vindo ao $APP")"
	cmsg_Idioma[pt_BR]="$(gettext "Escolha idioma")"
	cmsg_Desativar[pt_BR]="$(gettext "Desativar")"
	cmsg_Ativar[pt_BR]="$(gettext "Ativar")"
	cmsg_ParandoServico[pt_BR]="$(gettext "Parando serviço")"
	cmsg_AtivandoServico[pt_BR]="$(gettext "Ativando serviço")"
	cmsg_IniciandoServico[pt_BR]="$(gettext "Iniciando serviço")"
	cmsg_DesativandoServico[pt_BR]="$(gettext "Desativando serviço")"
}

sh_disableServices() {
	local service

	grafico=0
	for service in "${_SERVICES[@]}"; do
		sh_cmd_job "${cmsg_ParandoServico[$LC_DEFAULT]} $service" "sv stop $service" "$err_not_fatal"
		sh_cmd_job "${cmsg_DesativandoServico[$LC_DEFAULT]} $service" "rm -f /var/service/$service" "$err_not_fatal"
	done

	#	for xmsg in "${langmsg[@]}"; do eval "$xmsg"; done
	#echo "lang       ${#lang[@]} ${lang[@]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	#echo "cmsg_ERRO ${#cmsg_ERRO[@]} ${cmsg_ERRO[@]} ${cmsg_ERRO[$PT_BR]} ${cmsg_ERRO[$EN_US]}"
}

sh_splitarray() {
	local str="$1"
	local pos="$2"
	local sep="${3:-'|'}"
	local array

	[[ $# -eq 3 && "$pos" = "|" && "$sep" =~ ^[0-9]+$ ]] && {
		sep="$2"
		pos="$3"
	}
	[[ $# -eq 2 && "$pos" = "$sep" ]] && {
		sep="$pos"
		pos=1
	}
	[[ $# -eq 1 || ! "$pos" =~ ^[0-9]+$ ]] && { pos=1; }

	IFS="$sep" read -r -a array <<<"$str"
	echo "${array[pos - 1]}"
}

sh_getLocale() {
	local lc

	LC_DEFAULT="${Alanguage[pt_BR]}"
	LOCALE="pt_BR"
	#   if lc=$(grep _ <(locale -a) | head -1 | cut -c1-5); then
	#       LOCALE="$lc"
	#       LC_DEFAULT="${Alanguage[$lc]}"
	#   fi
}

sh_cmd_job() {
	local cmsg="$1"
	local cjob="$2"
	local erro_fatal="$3"
	local lretval=0

	msg "INFO" "$cmsg"
	$cjob >>"$BOOTLOG" 2>&1
	evaluate_retval "$?" "$err_not_fatal"
#	return "$?"
}

sh_enableServices() {
	local service

	# To enable a service on a booted system, create a symlink to the service directory in /var/service/:
	# ln -s /etc/sv/<service> /var/service/

	# If the system is not currently running, the service can be linked directly into the default runsvdir:
	# ln -s /etc/sv/<service> /etc/runit/runsvdir/default/
	# This will automatically start the service. Once a service is linked it will always start on boot and restart if it stops, unless administratively downed.
	# To prevent a service from starting at boot while allowing runit to manage it, create a file named down in its service directory:
	# touch /etc/sv/<service>/down

	for service in "${_SERVICES[@]}"; do
		sh_cmd_job "${cmsg_ParandoServico[$LC_DEFAULT]} $service"   "sv stop $service" "$err_not_fatal"
		sleep 1
#		sh_cmd_job "${cmsg_AtivandoServico[$LC_DEFAULT]} $service"  "ln -sf /etc/sv/$service /var/service/" "$err_not_fatal"
		sh_cmd_job "${cmsg_AtivandoServico[$LC_DEFAULT]} $service"  "ln -sf /etc/sv/$service /etc/runit/runsvdir/default/" "$err_not_fatal"
		sh_cmd_job "${cmsg_IniciandoServico[$LC_DEFAULT]} $service" "sv start $service" "$err_not_fatal"
		sleep 1
	done
}

sh_disableServices() {
	local service

	for service in "${_SERVICES[@]}"; do
		sh_cmd_job "${cmsg_ParandoServico[$LC_DEFAULT]} $service"     "sv stop $service" "$err_not_fatal"
#		sh_cmd_job "${cmsg_DesativandoServico[$LC_DEFAULT]} $service" "rm -f /var/service/$service" "$err_not_fatal"
		sh_cmd_job "${cmsg_DesativandoServico[$LC_DEFAULT]} $service" "touch /etc/sv/$service/down" "$err_not_fatal"
		sleep 1
	done
	display_result "$(sv status ${_SERVICES[@]})"
}

sh_chooseservices() {
	while true; do
		declare -A Aflag
		declare -a aservices
		declare -A Asv
		local array
		local x
		local sep="\xe2\x94\x82"
		local nconta=0
		local nc=0

		msg "** SERVICES **" "$(log_info_msg "${cmsg_servicosInstalados[$LC_DEFAULT]}")"
		if pushd '/etc/sv/' >>"$BOOTLOG" 2>&-; then
			evaluate_retval "$?" "$err_not_fatal"
			aservices=($(ls))
		else
			evaluate_retval "$?" "$err_not_fatal"
			popd >>"$BOOTLOG" 2>&1
		fi

		nconta="${#aservices[@]}"
		if ! ((nconta)); then
			info "** SERVICES **" "\n${RED}${cmsg_servicosnotfound[$LC_DEFAULT]} /etc/sv/${RESET}"
			info_msg "${red}${cmsg_InstalacaoAbortada[$LC_DEFAULT]}...${reset}"
			cleanup
		fi

		nc=0
		msg "** SERVICES **" "$(log_info_msg "${cmsg_servicosAtivos[$LC_DEFAULT]}")"
		for x in "${aservices[@]}"; do
			if sv status /etc/runit/runsvdir/current/"$x" >>"$BOOTLOG"; then
				status=$(sv status /etc/runit/runsvdir/current/"$x" | cut -d: -f1,3)
				Asv+=([$nc]="$x|Active|$status")
			else
				Asv+=([$nc]="$x|Disabled|")
			fi
			((++nc))
		done
		evaluate_retval "$?" "$err_not_fatal"

		array=()
		((--nconta))
		for x in $(seq 0 $nconta); do
			array+=("$(sh_splitarray "${Asv[$x]}" 1)" "$(printf "$sep%-8s$sep%-40s" "$(sh_splitarray "${Asv[$x]}" 2)" "$(sh_splitarray "${Asv[$x]}" 3)")" "${Aflag[$x]}")
		done

		service=$(${DIALOG} --title "** ${cmsg_Services[$LC_DEFAULT]^^} **" \
			--backtitle "$ccabec" \
			--colors \
			--clear \
			--cancel-label "${cmsg_Sair[$LC_DEFAULT]}" \
			--ok-label "${cmsg_Ativar[$LC_DEFAULT]}" \
			--extra-button --extra-label "${cmsg_Desativar[$LC_DEFAULT]}" \
			--checklist "${cmsg_MENU[$LC_DEFAULT]}" \
			0 0 30 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		_SERVICES=($(strtoarray "$service"))
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return
			;;
		"$D_OK")
			sh_enableServices "$@"
			;;
		3)
			sh_disableServices "$@"
			;;
		esac
	done
}

sh_main() {
	while true; do
		i18=$(${DIALOG} \
			--stdout \
			--default-item "$LC_DEFAULT" \
			--clear \
			--backtitle "$ccabec" \
			--title "${cmsg_welcome[$LC_DEFAULT]}" \
			--ok-label "${cmsg_Aceitar[$LC_DEFAULT]}" \
			--cancel-label "${cmsg_Sair[$LC_DEFAULT]}" \
			--menu "\n${cmsg_Idioma[$LC_DEFAULT]}:" \
			0 80 0 \
			0 'Português' \
			1 'English' \
			2 'Deustch' \
			3 'Français' \
			4 'Español' \
			5 'Italiano')

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			scrend 0
			;;
		esac
		LC_DEFAULT="$i18"
		LOCALE="${Alocale[$i18]}"
		break
	done
}

sh_setambiente
sh_getLocale
sh_setlanguage
sh_setvarcolors
sh_setascii_lines
sh_setlogprefix
sh_checkDependencies
sh_disableprintk
[[ "$1" = @(-V|-v|version|-version|--version) ]] && {
	sh_version
	exit $(($# ? 0 : 1))
}
[[ "$1" = @(-g|-G|--grafico) || "$2" = @(-g|-G|--grafico) ]] && grafico=$true
if [[ -n "$1" ]] && [[ "$1" -ge 0 ]]; then
	LC_DEFAULT="$1"
	LOCALE="${Alocale[$1]}"
else
	#	sh_main "$@"
	sh_checkroot
fi
sh_chooseservices "$@"
sh_enableprintk
