#!/usr/bin/env bash
#shellcheck disable=SC2145,SC2001,SC2188,SC2015,SC2155,SC2317,SC2320,SC2291,SC2034

#  void-wifi
#  Created: 2023/01/16
#  Altered: 2024/03/08
#
#  Copyright (c) 2023-2024, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
############################################################################
export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=void-wifi

#debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

#system
readonly APP="${0##*/}"
readonly _VERSION_='0.4.800.20240308'
readonly distro=$(uname -n)
readonly DEPENDENCIES=(dialog sed)
readonly BOOTLOG="/tmp/$APP-$(date +"%d%m%Y-%T" | sed 's/://g').log"
readonly LOGGER='/dev/tty8'
declare _REDE_WIFI="WIFI_NETWORK"
declare _SENHA_WIFI="WIFI_PASSWORD"
declare -i ncounter=0
: "${ccabec="$APP v${_VERSION_}"}"
: "${DIALOG=${DIALOG:-"dialog"}}"
tput sgr0 # reset colors
bold=$(tput bold)
reset=$(tput sgr0)
black=$(tput setaf 0)
red=$(tput bold)$(tput setaf 196)
green=$(tput setaf 2)
yellow=$(tput bold)$(tput setaf 3)
blue=$(tput setaf 4)
pink=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
orange=$(tput setaf 3)
purple=$(tput setaf 125)
violet=$(tput setaf 61)

# flag dialog exit status codes
: "${D_OK=0}"
: "${D_CANCEL=1}"
: "${D_HELP=2}"
: "${D_EXTRA=3}"
: "${D_ITEM_HELP=4}"
: "${D_ESC=255}"

# dialog colors
: "${BLACK="\Z0"}"
: "${GREEN="\Z2"}"
: "${MAGENTA="\Z5"}"
: "${REVERSE="\Zr"}"
: "${UNDERLINE="\Zu"}"
YELLOW="\Z3"
WHITE="\Z7"
BLUE="\Z4"
CYAN="\Z6"
RED="\Z1"
BOLD="\Zb"
RESET="\Zn"
LABEL="Use the ${RED}UP ${RESET}and ${RED}DOWN ${RESET}keys to navigate.\nUse ${RED}TAB ${RESET}to toggle between buttons and ${RED}ENTER ${RESET}to select."
declare Interrupted="$(gettext "Interrompido! Saindo...")"
trap 'printf "\n${red}$Interrupted\n"; cleanup; exit 0' INT TERM HUP

fmt() {
	printf "${bold}${yellow}%03d/%03d${reset}" "$ncounter" "$ncounter"
	return $?
}

unfmt() {
	local last_msg="$*"
	logmessage="${last_msg/${bold}${yellow}/}"
	logmessage="${logmessage/${reset}/}"
	echo "$logmessage"
}

info() {
	msg "$(fmt) $@"
	evaluate_retval "0"

	${DIALOG} \
		--colors \
		--title "$1" \
		--backtitle "$ccabec" \
		--msgbox "$2\n$3\n$4\n$5\n$6\n$7" \
		0 0
}

info_msg() {
	printf "%s" "\033[1m$@\n\033[m"
}

cleanup() {
	info_msg "$(gettext "Removendo arquivos temporários...")"
	rm -fv "$BOOTLOG"
	info_msg "exit 1"
	exit 1
}

sh_update_wpa_suplicant() {
	msg "INFO" "$(gettext "Ajustando") wpa_supplicant.conf"
	[[ ! -e /etc/wpa_supplicant/wpa_supplicant.conf ]] && >|/etc/wpa_supplicant/wpa_supplicant.conf
	if [[ -f /etc/wpa_supplicant/wpa_supplicant.conf ]]; then
		cat >"/etc/wpa_supplicant/wpa_supplicant.conf" <<EOF
ctrl_interface=/run/wpa_supplicant
ctrl_interface_group=wheel
update_config=1
fast_reauth=1

network={
   ssid=P"$_REDE_WIFI"
   psk="$_SENHA_WIFI"
   mesh_fwding=1
}
EOF
	fi
	return "$?"
}

sh_disableprintk() {
	if [ -w /proc/sys/kernel/printk ]; then
		echo 0 >/proc/sys/kernel/printk
	fi
}

sh_enableprintk() {
	if [ -w /proc/sys/kernel/printk ]; then
		echo 4 >/proc/sys/kernel/printk
	fi
}

sh_setascii_lines() {
	if [[ "$LANG" =~ 'UTF-8' ]]; then
		export NCURSES_NO_UTF8_ACS=0
	else
		export NCURSES_NO_UTF8_ACS=1
	fi
}

sh_checkroot() {
	if [ "$(id -u)" != "0" ]; then
		die "${red}$(gettext "erro: você não pode executar esta operação a menos que seja root.")"
	fi
}

sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}ERROR${reset}: I didn't find the command ${cyan}'$d'${reset}"
	done

	if ((errorFound)); then
		echo "${yellow}---------------$(gettext "IMPOSSÍVEL CONTINUAR")-------------${reset}"
		echo "$(gettext "Este script precisa dos comandos listados acima")"
		echo "$(gettext "Instale-os e/ou verifique se eles estão em seu") ${red}\$PATH${reset}"
		echo "${yellow}---------------$(gettext "IMPOSSÍVEL CONTINUAR")-------------${reset}"

		if [[ "$distro" != @(void|void-live|voidlinux) ]]; then
			echo
			if readconf "${yellow}$(gettext "Instalar commando(s)") '${cyan}${missing[*]}${reset}' ?"; then
				if xbps-install -S "${missing[@]}"; then
					die "$(gettext "INFO: Execute o aplicativo novamente")"
				else
					die "$(gettext "ERRO ao instalar comandos. Tente manualmente.")"
				fi
			fi
		fi
	fi
}

msg() {
	${DIALOG} \
		--no-collapse \
		--title "$1" \
		--backtitle "$ccabec" \
		--infobox "\n$2" \
		8 60
}

die() {
	if test $# -ge 2; then
		return 1
	fi
	local msg=$1
	shift
	printf "%-75s\n" "${bold}${red}$msg${reset}" >&2
	sh_enableprintk
	exit 1
}

readconf() {
	read -r -p "$1 [S/n]"
	[[ ${REPLY^} == "" ]] && return 0
	[[ ${REPLY^} == N ]] && return 1 || return 0
}

sh_cmd_job() {
	local cmsg="$1"
	local cjob="$2"
	local erro_fatal="$3"
	local lretval=0

	msg "INFO" "$cmsg"
	$cjob >>"$BOOTLOG" 2>&1
	return "$?"
}

sh_mkservices() {
	local aServices=('dhcpcd' 'wpa_supplicant')
	local service

	for service in "${aServices[@]}"; do
		sh_cmd_job "$(gettext "Instalando pacote") : $service" "xbps-install -Sy $service"
		sh_cmd_job "$(gettext "Ativando serviço")  : $service" "ln -sf /etc/sv/$service /etc/runit/runsvdir/current/"
		sh_cmd_job "$(gettext "Reiniciando serviço") : $service" "sv restart $service"
	done
}

sh_choosewifi() {
	while true; do
		local array=()
		local i
		local n=0
		local nc=0
		local result
		local sep="\xe2\x94\x82"

		last_msg="$(gettext "Verificando redes wifi")"
		wpa_cli scan_results 2>&1 | tee -i -a "$BOOTLOG" >$LOGGER
		if [[ "${PIPESTATUS[0]}" -gt 0 ]]; then
			info "WIFI" "${BLUE}$(gettext "A varredura não retornou nenhum resultado.")" \
				"$(gettext "Aparentemente, o serviço wpa_supplicant não está em execução.")" \
				"" \
				"${RED}$(gettext "Tente o seguinte"):${RESET}" \
				"${BOLD}${WHITE}$(gettext "1-Use a opção Serviços no menu para ativar.")" \
				"$(gettext "2-Verifique se existe um dispositivo wifi conectado à máquina.")"
			return 1
		fi
		scan_results=$(wpa_cli scan_results)
		lines=$(wc -l <<<"$scan_results")
		lines=$((lines - 2))

		unset ARRAY_{SSID,BSID,SIGNAL,FREQUENCY,FLAGS}
		while read -r line; do
			ARRAY_SSID+=("$(awk '{print $5" "$6" "$7}' <<<"$line")")
			ARRAY_BSID+=("$(cut -f1 <<<"$line")")
			ARRAY_SIGNAL+=("$(cut -f2 <<<"$line")")
			ARRAY_FREQUENCY+=("$(cut -f3 <<<"$line")")
			ARRAY_FLAGS+=("$(cut -f4 <<<"$line")")
		done < <(tail -$lines <<<"$scan_results")

		for i in "${ARRAY_SSID[@]}"; do
			array[n++]="$i"
			array[n++]=$(printf "$sep%-6s$sep%-4s$sep%3s$sep%-30s" "${ARRAY_BSID[$nc]}" "${ARRAY_SIGNAL[$nc]}" "${ARRAY_FREQUENCY[$nc]}" "${ARRAY_FLAGS[$nc]}")
			((nc++))
		done

		wifi=$(${DIALOG} \
			--default-item "$_DEVICE" \
			--backtitle "$ccabec" \
			--title "WIFI" \
			--colors \
			--menu "$LABEL" 0 0 10 "${array[@]}" 2>&1 >/dev/tty)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return
			;;
		esac
		_REDE_WIFI="$wifi"
		break
	done
}

sh_confwifi() {
	while true; do
		exec 3>&1
		wifitext=$(${DIALOG} \
			--title "$(gettext "=== REDE WI-FI ===")" \
			--colors \
			--backtitle "$ccabec" \
			--insecure "$@" \
			--extra-button --extra-label "Scan wifi" \
			--mixedform "$LABEL" \
			0 0 0 \
			"Network   : " 1 1 "$_REDE_WIFI" 1 15 40 0 0 \
			"Password  : " 2 1 "$_SENHA_WIFI" 2 15 40 0 1 \
			2>&1 1>&3)

		exit_status=$?
		case $exit_status in
		"$D_ESC" | "$D_CANCEL")
			return
			;;
		"$D_OK")
			mapfile -t aWifi <<<"$wifitext"
			_REDE_WIFI="${aWifi[0]}"
			_SENHA_WIFI="${aWifi[1]}"
			log_wait_msg "$(gettext "Configurações feitas. Prosseguindo com a instalação.")"
			sh_update_wpa_suplicant
			sh_mkservices
			;;
		3)
			sh_choosewifi
			continue
			;;
		esac
		exec 3>&-
		return 0
	done
}

sh_checkroot
sh_checkDependencies
sh_disableprintk
sh_setascii_lines
sh_confwifi "$@"
sh_enableprintk
