#!/bin/bash
#-
# Copyright (c) 2013-2015 Juan Romero Pardines.
# Copyright (c) 2017 Google
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#-

readonly PROGNAME=$(basename "$0")
readonly ARCH=$(uname -m)
readonly REQTOOLS="xbps-install xbps-reconfigure tar xz"
readonly aSysPkg=(base-minimal base-voidstrap base-system base-custom)
declare ADDITIONAL_PKGS="dbus grub wireless_tools xz wpa_supplicant dialog grub-void-theme nano nano-syntax-highlighting neofetch pfetch wget curl lvm2 cryptsetup zstd lynx vsv vpm opendoas openntpd pv"\
" cpio kpartx dracut ipw2100-firmware ipw2200-firmware zd1211-firmware wifi-firmware linux-firmware-broadcom"
declare -i quiet=0
declare -i njobs=11 ncontador=0

# This source pulls in all the functions from lib.sh.  This set of
# functions makes it much easier to work with chroots and abstracts
# away all the problems with running binaries with QEMU.
# shellcheck source=./lib.sh
source ./lib.sh

# Die is a function provided in lib.sh which handles the cleanup of
# the mounts and removal of temporary directories if the running
# program exists unexpectedly.
trap 'die "Interrupted! exiting..."' INT TERM HUP

# Even though we only support really one target for most of these
# architectures this lets us refer to these quickly and easily by
# XBPS_ARCH.  This makes it a lot more obvious what is happening later
# in the script, and it makes it easier to consume the contents of
# these down the road in later scripts.
usage() {
    cat <<_EOF
Usage: $PROGNAME [options] <arch>

Supported architectures: i686, i686-musl, x86_64, x86_64-musl,
                         armv5tel, armv5tel-musl, armv6l, armv6l-musl, armv7l, armv7l-musl
                         aarch64, aarch64-musl,
                         mipsel, mipsel-musl
                         ppc, ppc-musl
                         ppc64le, ppc64le-musl, ppc64, ppc64-musl


Options
    -b <syspkg> Set an alternative base-system package (defaults to base-voidstrap)
    -c <dir>    Set XBPS cache directory (defaults to \$PWD/xbps-cachedir-<arch>)
    -C <file>   Full path to the XBPS configuration file
    -h          Show this help
    -r <repo>   Set XBPS repository (may be set multiple times)
    -x <num>    Use <num> threads to compress the image (dynamic if unset)
    -o <file>   Filename to write the ROOTFS archive to
    -V          Show version
    -q          Quiet
_EOF
}

# ########################################
#      SCRIPT EXECUTION STARTS HERE
# ########################################

# Set the default system package.
#SYSPKG="base-minimal"
#SYSPKG="base-voidstrap"
#SYSPKG="base-system"

# Boilerplate option parsing.  This script supports the bare minimum
# needed to build an image.
while getopts "b:C:c:hr:x:o:vV:qQ" opt; do
    case $opt in
        b) SYSPKG="$OPTARG";;
        C) XBPS_CONFFILE="-C $OPTARG";;
        c) XBPS_CACHEDIR="--cachedir=$OPTARG";;
        h) usage; exit 0;;
        r) XBPS_REPOSITORY="$XBPS_REPOSITORY --repository=$OPTARG";;
        x) COMPRESSOR_THREADS="$OPTARG" ;;
        o) FILENAME="$OPTARG" ;;
        v|V) echo "$PROGNAME @@MKLIVE_VERSION@@"; exit 0;;
        q|Q) quiet=1;;
    esac
done
shift $((OPTIND - 1))
#XBPS_TARGET_ARCH="$1"
XBPS_TARGET_ARCH="x86_64"

# Set the XBPS cache
set_cachedir

# This is an aweful hack since the script isn't using privesc
# mechanisms selectively.  This is a TODO item.
if [ "$(id -u)" -ne 0 ]; then
    die "need root perms to continue, exiting."
fi

main() {
	# Before going any further, check that the tools that are needed are
	# present.  If we delayed this we could check for the QEMU binary, but
	# its a reasonable tradeoff to just bail out now.
	check_tools

	# If the arch wasn't set let's bail out now, nothing else in this
	# script will work without knowing what we're trying to build for.
	if [ -z "$XBPS_TARGET_ARCH" ]; then
	    echo "$PROGNAME: arch was not set!"
	    usage; exit 1
	fi

	# We need to operate on a tempdir, if this fails to create, it is
	# absolutely crucial to bail out so that we don't hose the system that
	# is running the script.
	if (( quiet )); then
#		ROOTFS=$(mktemp -d) || die "failed to create tempdir, exiting..." >/dev/null 2>&-
		ROOTFS="base-custom"
	else
#		ROOTFS=$(mktemp -d) || die "failed to create tempdir, exiting..."
		ROOTFS="base-custom"
	fi
	mkdir -p "$ROOTFS"

	# This maintains the chain of trust, the keys in the repo are known to
	# be good and so we copy those.  Why don't we just use the ones on the
	# host system?  That's a good point, but there's no promise that the
	# system running the script is Void, or that those keys haven't been
	# tampered with.  Its much easier to use these since the will always
	# exist.

	if (( quiet )); then
		mkdir -p "$ROOTFS/var/db/xbps/keys" >/dev/null 2>&-
		cp keys/*.plist "$ROOTFS/var/db/xbps/keys" >/dev/null 2>&-
	else
		mkdir -p "$ROOTFS/var/db/xbps/keys"
		cp keys/*.plist "$ROOTFS/var/db/xbps/keys"
	fi

	# This sets up files that are important for XBPS to work on the new
	# filesystem.  It does not actually install anything.
	if (( quiet )); then
		run_cmd_target "xbps-install -Sy $XBPS_CONFFILE $XBPS_CACHEDIR $XBPS_REPOSITORY -r $ROOTFS" >/dev/null 2>&-
	else
		run_cmd_target "xbps-install -Sy $XBPS_CONFFILE $XBPS_CACHEDIR $XBPS_REPOSITORY -r $ROOTFS"
	fi

	# Later scripts expect the permissions on / to be the canonical 755,
	# so we set this here.
	chmod 755 "$ROOTFS"

	# The binfmt setup and pseudofs mountpoints are needed for the qemu
	# support in cases where we are running things that aren't natively
	# executable.
	register_binfmt
	mount_pseudofs

	# With everything setup, we can now run the install to load the
	# system package into the rootfs.  This will not produce a
	# bootable system but will instead produce a base component that can
	# be quickly expanded to perform other actions on.
	if (( quiet )); then
		run_cmd_target "xbps-install -SUy $XBPS_CONFFILE $XBPS_CACHEDIR $XBPS_REPOSITORY -r $ROOTFS -y $SYSPKG $ADDITIONAL_PKGS" >/dev/null 2>&-
	else
		run_cmd_target "xbps-install -SUy $XBPS_CONFFILE $XBPS_CACHEDIR $XBPS_REPOSITORY -r $ROOTFS -y $SYSPKG $ADDITIONAL_PKGS"
	fi
	# Enable en_US.UTF-8 locale and generate it into the target ROOTFS.
	# This is a bit of a hack since some glibc stuff doesn't really work
	# correctly without a locale being generated.  While some could argue
	# that this is an arbitrary or naive choice to enable the en_US
	# locale, most people using Void are able to work with the English
	# language at least enough to enable thier preferred locale.  If this
	# truly becomes an issue in the future this hack can be revisited.
	if [ -e "$ROOTFS/etc/default/libc-locales" ]; then
#	    LOCALE=en_US.UTF-8
	    LOCALE=pt_BR.UTF-8
	    sed -e "s/\#\(${LOCALE}.*\)/\1/g" -i "$ROOTFS/etc/default/libc-locales"
	fi

	# The reconfigure step needs to execute code that's been compiled for
	# the target architecture.  Since the target isn't garanteed to be the
	# same as the host, this needs to be done via qemu.
	info_msg "Reconfiguring packages for ${XBPS_TARGET_ARCH} ..."

	# This step sets up enough of the base-files that the chroot will work
	# and they can be reconfigured natively.  Without this step there
	# isn't enough configured for ld to work.  This step runs as the host
	# architecture, but we may need to set up XBPS_ARCH for the target
	# architecture (but only when compatible).
	if is_target_native "$XBPS_TARGET_ARCH"; then
	    run_cmd_target "xbps-reconfigure --rootdir $ROOTFS base-files"
	else
	    run_cmd "xbps-reconfigure --rootdir $ROOTFS base-files"
	fi

	# Now running as the target system, this step reconfigures the
	# base-files completely.  Certain things just won't work in the first
	# pass, so this cleans up any issues that linger.
	run_cmd_chroot "$ROOTFS" "env -i xbps-reconfigure -f base-files"

	# Once base-files is configured and functional its possible to
	# configure the rest of the system.
	run_cmd_chroot "$ROOTFS" "xbps-reconfigure -a"

	# Set the default password.  Previous versions of this script used a
	# chroot to do this, but that is unnecessary since chpasswd
	# understands how to operate on chroots without actually needing to be
	# chrooted.  We also remove the lock file in this step to clean up the
	# lock on the passwd database, lest it be left in the system and
	# propogated to other points.
	info_msg "Setting the default root password ('voidlinux')"
	if [ ! -f "$ROOTFS/etc/shadow" ] ; then
	    run_cmd_chroot "$ROOTFS" pwconv
	fi
	echo root:voidlinux | run_cmd_chroot "$ROOTFS" "chpasswd -c SHA512" || die "Could not set default credentials"
	rm -f "$ROOTFS/etc/.pwd.lock"

	 #perfumery BR
	 info_msg "Ativando bash para o usuario root"
	 run_cmd_chroot "$ROOTFS" "chsh -s /bin/bash root"

	 info_msg "Configurando teclado para br-abnt2"
 	 _KEYMAP=br-abnt2
    [[ ! -e "$ROOTFS/etc/rc.conf" ]] && >| "$ROOTFS/etc/rc.conf"
	 #echo "KEYMAP=$_KEYMAP" >> "$dir_install/etc/rc.conf"
    sed -i -e "s|KEYMAP=.*|KEYMAP=$_KEYMAP|g" "$ROOTFS/etc/rc.conf"
    sed -i -e "s|#\?KEYMAP=.*|KEYMAP=$_KEYMAP|g" "$ROOTFS/etc/rc.conf"

	info_msg "Configurando grub"
   echo "GRUB_THEME=/boot/grub/themes/void/theme.txt" >> "$ROOTFS/etc/default/grub"
   echo "GRUB_DISABLE_OS_PROBER=true"                 >> "$ROOTFS/etc/default/grub"

	info_msg "Configurando nanorc"
	[ -e .bashrc             ] && install -Dm644 nanorc "$ROOTFS"/etc/nanorc

	info_msg "Ajustando bashrc into the rootfs $ROOTFS"
	[ -d "$ROOTFS/etc/skel/" ] && mkdir -p "$ROOTFS"/etc/skel/
	[ -e .bashrc             ] && install -Dm755 .bashrc        "$ROOTFS"/etc/skel/.bashrc
	[ -e .bashrc             ] && install -Dm755 .bashrc        "$ROOTFS"/root/.bashrc
	[ -e .ps1                ] && install -Dm755 .ps1           "$ROOTFS"/etc/skel/.ps1
	[ -e .ps1                ] && install -Dm755 .ps1           "$ROOTFS"/root/.ps1
	[ -e .git-prompt.sh      ] && install -Dm755 .git-prompt.sh "$ROOTFS"/etc/skel/.git-prompt.sh
	[ -e .git-prompt.sh      ] && install -Dm755 .git-prompt.sh "$ROOTFS"/root/.git-prompt.sh
	[ -e .dircolors          ] && install -Dm755 .dircolors     "$ROOTFS"/etc/skel/.dircolors
	[ -e .dircolors          ] && install -Dm755 .dircolors     "$ROOTFS"/root/.dircolors
	[ -e bashrc.sh           ] && install -Dm755 bashrc.sh      "$ROOTFS"/etc/bash/bashrc.d/bashrc.sh
	[ -e .bash_profile       ] && install -Dm755 .bash_profile  "$ROOTFS"/etc/skel/.bash_profile
	[ -e .bash_profile       ] && install -Dm755 .bash_profile  "$ROOTFS"/root/.bash_profile
	[ -e .bashrckali         ] && install -Dm755 .bashrckali    "$ROOTFS"/root/.bashrckali
	[ -e .bashrckali         ] && install -Dm755 .bashrckali    "$ROOTFS"/etc/skel/.bashrckali
	[ -e .bashrcfull         ] && install -Dm755 .bashrcfull    "$ROOTFS"/root/.bashrcfull

	[ -e void-install        ] && install -Dm755 void-install    "$ROOTFS"/usr/bin/
	[ -e void-clonedisk      ] && install -Dm755 void-clonedisk  "$ROOTFS"/usr/bin/
	[ -e void-gitclone       ] && install -Dm755 void-gitclone   "$ROOTFS"/usr/bin/
	[ -e void-mirror         ] && install -Dm755 void-mirror     "$ROOTFS"/usr/bin/
	[ -e void-remove-vg      ] && install -Dm755 void-remove-vg  "$ROOTFS"/usr/bin/
	[ -e void-services       ] && install -Dm755 void-services   "$ROOTFS"/usr/bin/
	[ -e void-testmirror     ] && install -Dm755 void-testmirror "$ROOTFS"/usr/bin/
	[ -e void-wifi           ] && install -Dm755 void-wifi       "$ROOTFS"/usr/bin/
	[ -e void-xrandr         ] && install -Dm755 void-xrandr     "$ROOTFS"/usr/bin/
	[ -e void-runimage       ] && install -Dm755 void-runimage   "$ROOTFS"/usr/bin/
	[ -e void-maketar        ] && install -Dm755 void-maketar    "$ROOTFS"/usr/bin/
	[ -e void-parted         ] && install -Dm755 void-parted     "$ROOTFS"/usr/bin/
	[ -e fetch		         ] && install -Dm755 fetch           "$ROOTFS"/usr/bin/

	# At this point we're done running things in the chroot and we can
	# clean up the shims.  Failure to do this can result in things hanging
	# when we try to delete the tmpdir.
	cleanup_chroot

	# The cache isn't that useful since by the time the ROOTFS will be
	# used it is likely to be out of date.  Rather than shipping it around
	# only for it to be out of date, we remove it now.
	rm -rf "$ROOTFS/var/cache/*"

	# Finally we can compress the tarball, the name will include the
	# architecture and the date on which the tarball was built.
	#: "${FILENAME:=void-${XBPS_TARGET_ARCH}-ROOTFS-$(date '+%Y%m%d').tar.xz}"
	#: "${FILENAME:=void-${XBPS_TARGET_ARCH}-${SYSPKG}-$(date '+%Y%m%d').tar.xz}"

	#: "${FILENAME:=void-${XBPS_TARGET_ARCH}-${SYSPKG}-$(date '+%Y%m%d').tar.zst}"
	#run_cmd "tar -cp --posix --xattrs -C $ROOTFS . | zstd - -19 -o $FILENAME "
	#run_cmd "tar -cp --posix --xattrs -C $ROOTFS . | zstd -19 > $FILENAME "

	#: "${FILENAME:=void-${XBPS_TARGET_ARCH}-${SYSPKG}-$(date '+%Y%m%d').tar.gz}"
	#run_cmd "tar -cp --posix --xattrs -C $ROOTFS . | gzip -9 > $FILENAME "

#	FILENAME=void-"${XBPS_TARGET_ARCH}-${SYSPKG}"-$(date '+%Y%m%d').tar.xz
	FILENAME=void-"${XBPS_TARGET_ARCH}-base-custom"-$(date '+%Y%m%d').tar.xz
	run_cmd "tar -cp --posix --xattrs -C $ROOTFS . | xz -T${COMPRESSOR_THREADS:-0} -9 > $FILENAME "

	# Now that we have the tarball we don't need the rootfs anymore, so we
	# can get rid of it.
#	rm -rf "$ROOTFS"

	# Last thing to do before closing out is to let the user know that
	# this succeeded.  This also ensures that there's something visible
	# that the user can look for at the end of the script, which can make
	# it easier to see what's going on if something above failed.
	info_msg "Successfully created $FILENAME ($XBPS_TARGET_ARCH)"
}

#SYSPKG="base-minimal"
SYSPKG="base-voidstrap"
#SYSPKG="base-system"
main
exit

for i in "${aSysPkg[@]}";
do
	SYSPKG="$i"
	main
done
